* What

This project helps measure the scaling relationship between the number
of tracked tables, the number of roles, and the memory footprint for
Hasura ~graphql-engine~ v2.

* Why

It's a matter of lore to say that Hasura's memory usage is
proportional both to the number of tracked tables and the number or
roles on those tables.  This project is an attempt to demystify that
lore with a quantitative analysis.

* How

This project has a ~docker-compose.yaml~ file that starts two
services, ~postgres~ and ~graphql-engine~.  The ~postgres~ service has
initialization scripts that create functions for creating tables and
for generating Hasura metadata.  The general recipe then is:

1. Launch the services.
2. Call the PostgreSQL functions to create some number of tables.
3. Call the PostgreSQL function to create the metadata and apply it to
   Hasura.

* Steps

1. Clone this repository.

#+begin_src sh
git clone https://github.com/dventimihasura/hasura-projects.git
#+end_src

2. Change to the ~memory-footprint-1~ directory.

#+begin_src sh
cd memory-footprint-1
#+end_src

3. Start the ~postgres~ and ~graphql-engine~ services using Docker
   Compose.

#+begin_src sh
docker compose up -d
#+end_src

4. Use the ~psql~ PostgreSQL client to create the desired number of
   schema and tables within those schema.

#+begin_src sh
psql "postgres://postgres:postgres@localhost:15432/postgres" -f scratch.sql -vN_SCHEMA=1 -vN_TABLES=10
#+end_src

5. Use the ~psql~ PostgreSQL client to generate Hasura metadata to
   track those tables and associate the desired number of
   ~select_permission~ roles.  In this example we're creating roles
   ~role_1~ through ~role_10~.

#+begin_src sh
psql -At "postgres://postgres:postgres@localhost:15432/postgres" -c "select create_metadata(1, 10)" | curl -s http://localhost:8080/v1/metadata -d @-
#+end_src

6. Examine the ~graphql_engine~ Docker container memory footprint.

#+begin_src sh
docker stats memory-footprint-1-graphql-engine-1
#+end_src
