version: "3.6"
services:
  metadatadb:
    image: postgres:15
    healthcheck:
      test: "pg_isready -U postgres"
    restart: always
    volumes:
      - ./initdb.d-metadatadb:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_PASSWORD: postgres
  catalogdb:
    healthcheck:
      test: "pg_isready -U postgres"
    image: postgres:15
    command: ["postgres", "-c", "custom.swagger_port=${NGINX_PORT}"]
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./initdb.d-catalogdb:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_PASSWORD: postgres
  mysqldb:
    image: mysql:8.0.33
    healthcheck:
      test: "mysqladmin ping -h localhost"
    ports:
      - "${MYSQL_PORT}:3306"
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    volumes:
      - ./initdb.d-mysqldb:/docker-entrypoint-initdb.d:ro
    environment:
      MYSQL_DATABASE: mysql
      MYSQL_PASSWORD: mysql
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_USER: mysql
  postgrest:
    image: postgrest/postgrest:v11.0.1
    depends_on:
      catalogdb:
        condition: service_healthy
    restart: always
    ports:
      - "${POSTGREST_PORT}:3000"
    environment:
      PGRST_ADMIN_SERVER_PORT: 3001
      PGRST_DB_ANON_ROLE: web_anon
      PGRST_DB_ROOT_SPEC: root
      PGRST_DB_SCHEMAS: api
      PGRST_DB_URI: postgres://postgres:postgres@catalogdb/postgres
      PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:3000
  nginx:
    image: fabiocicerchia/nginx-lua:1.25.0-ubuntu22.04-amd64
    depends_on:
      - postgrest
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
  swagger:
    image: swaggerapi/swagger-ui
    depends_on:
      - postgrest
    ports:
      - "${SWAGGER_PORT}:8080"
    environment:
      API_URL: http://localhost:${NGINX_PORT}
  marketplace:
    image: hasura/graphql-engine:v2.26.0
    depends_on:
      metadatadb:
        condition: service_healthy
    ports:
      - "${MARKETPLACE_PORT}:8080"
    restart: always
    environment:
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgres@metadatadb:5432/marketplace
  catalog:
    image: hasura/graphql-engine:v2.26.0
    depends_on:
      metadatadb:
        condition: service_healthy
    ports:
      - "${CATALOG_PORT}:8080"
    restart: always
    environment:
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgres@metadatadb:5432/catalog
  gateway:
    image: hasura/graphql-engine:v2.26.0
    depends_on:
      metadatadb:
        condition: service_healthy
    ports:
      - "${GATEWAY_PORT}:8080"
    restart: always
    environment:
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgres@metadatadb:5432/gateway
