version: "3.6"
services:
  postgres:
    healthcheck:
      test: ["CMD", "/usr/bin/psql -c 'select count(1) from foo'"]
    image: postgres:15
    restart: always
    ports:
      - "15432:5432"
    volumes:
      - ./initdb.d-postgres:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_PASSWORD: postgres
  postgrest:
    image: postgrest/postgrest:v11.0.1
    healthcheck:
      test: ["CMD", "curl -s http://localhost:3001/live"]
    depends_on:
      - postgres
    restart: always
    ports:
      - "13000:3000"
    environment:
      PGRST_ADMIN_SERVER_PORT: 3001
      PGRST_DB_ANON_ROLE: web_anon
      PGRST_DB_SCHEMAS: api
      PGRST_DB_URI: postgres://postgres:postgres@postgres/postgres
      PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:3000
  nginx:
    image: fabiocicerchia/nginx-lua:1.25.0-ubuntu22.04-amd64
    depends_on:
      - postgrest
    ports:
      - "13001:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
  swagger:
    image: swaggerapi/swagger-ui
    depends_on:
      - postgrest
    ports:
      - "18080:8080"
    environment:
      API_URL: http://localhost:13000
  metadata:
    image: postgres:15
    healthcheck:
      test: ["CMD", "pg_isready -U postgres"]
    restart: always
    volumes:
      - ./initdb.d-metadata:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_PASSWORD: postgres
  marketplace:
    image: hasura/graphql-engine:v2.26.0
    healthcheck:
      test: ["CMD", "curl -s http://localhost:8080/v1/healthcheck"]
    depends_on:
      - metadata
      - postgrest
    ports:
      - "8080:8080"
    restart: always
    environment:
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgres@metadata:5432/marketplace
  catalog:
    image: hasura/graphql-engine:v2.26.0
    healthcheck:
      test: ["CMD", "curl -s http://localhost:8080/v1/healthcheck"]
    depends_on:
      - metadata
      - postgrest
    ports:
      - "8081:8080"
    restart: always
    environment:
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgres@metadata:5432/catalog
  gateway:
    image: hasura/graphql-engine:v2.26.0
    healthcheck:
      test: ["CMD", "curl -s http://localhost:8080/v1/healthcheck"]
    depends_on:
      - metadata
      - catalog
      - marketplace
    ports:
      - "8082:8080"
    restart: always
    environment:
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgres@metadata:5432/gateway
  init_marketplace:
    depends_on:
      - marketplace
    build: .
    volumes:
      - ./hasura_metadata_marketplace.json:/metadata.json:ro
    command: bash -c "cat /metadata.json | jq -rc '{\"type\":\"replace_metadata\",\"args\":(.metadata)}' | curl -s http://marketplace:8080/v1/metadata -d @-"
  init_catalog:
    depends_on:
      - catalog
    build: .
    volumes:
      - ./hasura_metadata_catalog.json:/metadata.json:ro
    command: bash -c "cat /metadata.json | jq -rc '{\"type\":\"replace_metadata\",\"args\":(.metadata)}' | curl -s http://catalog:8080/v1/metadata -d @-"
  init_gateway:
    depends_on:
      - gateway
    build: .
    volumes:
      - ./hasura_metadata_gateway.json:/metadata.json:ro
    command: bash -c "cat /metadata.json | jq -rc '{\"type\":\"replace_metadata\",\"args\":(.metadata)}' | curl -s http://gateway:8080/v1/metadata -d @-"
