# -*- mode: org; -*-

#+STARTUP: indent

* What

This is a Hasura example application that uses the postgres_air
database.

* Why

It is useful to have a Hasura application with a sample database with
a large number of records.

* How

This uses the [[https://neon.tech/docs/import/import-sample-data#postgres-air-database][postgres_air]] sample database hosted by [[https://neon.tech/home][Neon]].  It uses
the PostgreSQL Docker [[https://hub.docker.com/_/postgres][image]] although it uses a custom image built in
[[file:Dockerfile][Dockerfile]] in order to add ~wget~ and ~gzip~ which are needed to
process the sample database file.  The sample database is downloaded
automatically in the [[file:initdb.d-postgres/init-user-db.sh][init-user-db.sh]] initialization script file in the
[[file:README][initdb.d-postgres]] directory.  It uses [[https://schemaspy.org/][SchemaSpy]] from the SchemaSpy
Docker [[https://hub.docker.com/r/schemaspy/schemaspy/][image]] to generate database documentation in the [[file:README][doc]] directory.
And, it uses [[https://hasura.io/][Hasura]] from the Hasura Docker [[https://hub.docker.com/r/hasura/graphql-engine][image]] to run the
application.  Finally, it depends on a ~.env~ file to specify local
ports to be used by Hasura and PostgreSQL (that file is not included
in this repository).

* Steps

** Step 1:  Clone this repository.

#+begin_src bash :exports code
  git clone https://github.com/dventimihasura/hasura-projects
#+end_src

** Step 2:  Change to the ~postgres-air~ directory.

#+begin_src bash :exports code
  cd postgres-air
#+end_src

** Step 2:  Create a ~.env~ file.

#+begin_src bash :exports code
  cat << EOF > .env
  PGPORT=<your local postgrs port>
  HGEPORT=<your local Hasura port>
  EOF
#+end_src

** Step 3:  Start the application.

#+begin_src bash :exports code
  docker-compose up
#+end_src

or

#+begin_src bash :exports code
  docker compose up
#+end_src

** Step 4:  Check the results.

- Example 1 :: Count of boarding passes for flight 330, seat 0B, precheck true.

#+begin_src graphql :url http://localhost:8081/v1/graphql
query BoardingPasses {
  postgres_air_boarding_pass_aggregate(
    where: {
      _and: [
        {
          _or: [
            {booking_leg: {flight: {aircraft_code: {_eq: "330"}}}}
            {seat: {_eq: "0B"}}
          ]
        }
        {precheck: {_is_null: false}}
      ]
    }
  ) {
    aggregate {
      count
    }
  }
}
#+end_src

#+RESULTS:
: {
:   "data": {
:     "postgres_air_boarding_pass_aggregate": {
:       "aggregate": {
:         "count": 4568723
:       }
:     }
:   }
: }
