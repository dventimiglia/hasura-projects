"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchedSQLDataSource = void 0;
const crypto_1 = require("crypto");
const apollo_datasource_1 = require("apollo-datasource");
const apollo_server_caching_1 = require("apollo-server-caching");
const dataloader_1 = __importDefault(require("dataloader"));
const knex_1 = __importDefault(require("knex"));
const knex_tiny_logger_1 = __importDefault(require("knex-tiny-logger"));
const { DEBUG } = process.env;
let hasCache = false;
let hasLogger = false;
let hasBatch = false;
class BatchedSQLDataSource extends apollo_datasource_1.DataSource {
    cache;
    context;
    db;
    seperateInstances;
    constructor(readKnexConfig, writeKnexConfig) {
        super();
        this.seperateInstances = true;
        const queryConnection = typeof readKnexConfig === "function"
            ? readKnexConfig
            : (0, knex_1.default)(readKnexConfig);
        if (!writeKnexConfig) {
            this.seperateInstances = false;
            writeKnexConfig = queryConnection;
        }
        const writeConnection = typeof writeKnexConfig === "function"
            ? writeKnexConfig
            : (0, knex_1.default)(writeKnexConfig);
        this.db = {
            query: queryConnection,
            write: writeConnection,
        };
        this._extendKnex();
    }
    _extendKnex() {
        const _this = this;
        const knexQueryBuilder = knex_1.default.QueryBuilder;
        if (!this.db.query.cache && !hasCache) {
            knexQueryBuilder.extend("cache", function (ttl) {
                return _this.cacheQuery(this, ttl);
            });
            hasCache = true;
        }
        if (!this.db.query.batch && !hasBatch) {
            knexQueryBuilder.extend("batch", function (callback) {
                const query = this.clone();
                return _this.batchQuery(query, callback);
            });
            hasBatch = true;
        }
    }
    batchQuery(query, callback) {
        return new dataloader_1.default((keys) => callback(query, keys));
    }
    initialize(config) {
        this.context = config.context;
        this.cache = config.cache || new apollo_server_caching_1.InMemoryLRUCache();
        if (DEBUG && !hasLogger) {
            hasLogger = true; // Prevent duplicate loggers
            (0, knex_tiny_logger_1.default)(this.db.query); // Add a logging utility for debugging
            if (this.seperateInstances)
                (0, knex_tiny_logger_1.default)(this.db.write); // Add a logging utility for debugging
        }
    }
    cacheQuery(query, ttl = 5) {
        const cacheKey = (0, crypto_1.createHash)("sha1")
            .update(query.toString())
            .digest("base64");
        return this.cache.get(cacheKey).then((entry) => {
            if (entry)
                return Promise.resolve(JSON.parse(entry));
            return query.then((rows) => {
                if (rows)
                    this.cache.set(cacheKey, JSON.stringify(rows), { ttl });
                return Promise.resolve(rows);
            });
        });
    }
}
exports.BatchedSQLDataSource = BatchedSQLDataSource;
