import { createHash } from "crypto";
import { DataSource } from "apollo-datasource";
import { InMemoryLRUCache } from "apollo-server-caching";
import DataLoader from "dataloader";
import knex from "knex";
import knexTinyLogger from "knex-tiny-logger";
const { DEBUG } = process.env;
let hasCache = false;
let hasLogger = false;
let hasBatch = false;
export class BatchedSQLDataSource extends DataSource {
    cache;
    context;
    db;
    seperateInstances;
    constructor(readKnexConfig, writeKnexConfig) {
        super();
        this.seperateInstances = true;
        const queryConnection = typeof readKnexConfig === "function"
            ? readKnexConfig
            : knex(readKnexConfig);
        if (!writeKnexConfig) {
            this.seperateInstances = false;
            writeKnexConfig = queryConnection;
        }
        const writeConnection = typeof writeKnexConfig === "function"
            ? writeKnexConfig
            : knex(writeKnexConfig);
        this.db = {
            query: queryConnection,
            write: writeConnection,
        };
        this._extendKnex();
    }
    _extendKnex() {
        const _this = this;
        const knexQueryBuilder = knex.QueryBuilder;
        if (!this.db.query.cache && !hasCache) {
            knexQueryBuilder.extend("cache", function (ttl) {
                return _this.cacheQuery(this, ttl);
            });
            hasCache = true;
        }
        if (!this.db.query.batch && !hasBatch) {
            knexQueryBuilder.extend("batch", function (callback) {
                const query = this.clone();
                return _this.batchQuery(query, callback);
            });
            hasBatch = true;
        }
    }
    batchQuery(query, callback) {
        return new DataLoader((keys) => callback(query, keys));
    }
    initialize(config) {
        this.context = config.context;
        this.cache = config.cache || new InMemoryLRUCache();
        if (DEBUG && !hasLogger) {
            hasLogger = true; // Prevent duplicate loggers
            knexTinyLogger(this.db.query); // Add a logging utility for debugging
            if (this.seperateInstances)
                knexTinyLogger(this.db.write); // Add a logging utility for debugging
        }
    }
    cacheQuery(query, ttl = 5) {
        const cacheKey = createHash("sha1")
            .update(query.toString())
            .digest("base64");
        return this.cache.get(cacheKey).then((entry) => {
            if (entry)
                return Promise.resolve(JSON.parse(entry));
            return query.then((rows) => {
                if (rows)
                    this.cache.set(cacheKey, JSON.stringify(rows), { ttl });
                return Promise.resolve(rows);
            });
        });
    }
}
