import { DataSource } from "apollo-datasource";
import { InMemoryLRUCache } from "apollo-server-caching";
import DataLoader from "dataloader";
import { Knex } from "knex";
import { Knex as KnexOriginal } from "knex";
declare module "knex" {
    namespace Knex {
        type KnexConfig = {
            client: string;
            connection: string | undefined;
        };
        type BatchCallback = (query: Knex.QueryBuilder, keys: readonly any[]) => Promise<any[]>;
        interface QueryBuilder {
            cache<TRecord extends {}, TResult>(value: number): KnexOriginal.QueryBuilder<TRecord, TResult>;
            batch(callback: BatchCallback): BatchedLoader;
        }
    }
}
export interface DataSourceKnex extends Knex {
    cache?: Knex.QueryBuilder["cache"];
    batch?: Knex.QueryBuilder["batch"];
}
export interface BatchedLoader<T = unknown, K = any[]> extends DataLoader<T, K> {
}
export declare class BatchedSQLDataSource extends DataSource {
    cache: any;
    context: any;
    db: {
        query: DataSourceKnex;
        write: DataSourceKnex;
    };
    seperateInstances: boolean;
    constructor(readKnexConfig: Knex.KnexConfig | DataSourceKnex, writeKnexConfig?: Knex.KnexConfig | DataSourceKnex);
    private _extendKnex;
    batchQuery(query: Knex.QueryBuilder, callback: Knex.BatchCallback): BatchedLoader;
    initialize(config: {
        context: any;
        cache: InMemoryLRUCache<string>;
    }): void;
    cacheQuery(query: Promise<any>, ttl?: number): any;
}
