{
  "openapi": "3.1.0",
  "info": {
    "title": "HPE Greenlake for Compute Ops Management API",
    "description": "GreenLake for Compute Operations Management provides a Restful API to customers who want to manage their devices programmatically or through a command line. The API enables customers to invoke operations or tasks such as list devices, see device details, device health, and manage their device's firmware.",
    "license": {
      "name": "HPE End User License Agreement",
      "url": "https://www.hpe.com/us/en/software/licensing.html"
    },
    "version": "latest"
  },
  "servers": [
    {
      "url": "https://us-west2-api.compute.cloud.hpe.com",
      "description": "Compute Ops Management API in US West 2"
    },
    {
      "url": "https://eu-central1-api.compute.cloud.hpe.com",
      "description": "Compute Ops Management API in EU Central 1"
    },
    {
      "url": "https://ap-northeast1-api.compute.cloud.hpe.com",
      "description": "Compute Ops Management API in AP NorthEast 1"
    }
  ],
  "components": {
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
    ,
    "parameters": {
      "offsetParam": {
        "in": "query",
        "name": "offset",
        "description": "Zero-based resource offset to start the response from",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "example": 10
      },
      "limitParam": {
        "in": "query",
        "name": "limit",
        "description": "The maximum number of records to return.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000
        },
        "example": 10
      },
      "filterParam": {
        "in": "query",
        "name": "filter",
        "description": "Limit the resources operated on by an endpoint or when used with a multiple-GET endpoint,\nreturn only the subset of resources that match the filter. The filter grammar is a subset\nof OData 4.0.\n\n| CLASS     |  EXAMPLES                                          |\n|-----------|----------------------------------------------------|\n| Types     | integer, decimal, timestamp, string, boolean, null |\n| Operations| eq, ne, gt, ge, lt, le, in                         |\n| Logic     | and, or, not                                       |\n",
        "schema": {
          "type": "string"
        },
        "examples": {
          "equals": {
            "summary": "Filter with equality check",
            "description": "Return resources where groupId == 031adad0-f77c-403d-84f5-e0bb46e0d927",
            "value": "groupId eq '031adad0-f77c-403d-84f5-e0bb46e0d927'"
          },
          "nested-fields": {
            "summary": "Filter on a nested attribute",
            "description": "Return resources where the type subfield of the source field == Server",
            "value": "source/type eq 'Server'"
          },
          "not": {
            "summary": "Filter on an inverted query",
            "description": "Return resources where the type subfield of the source field != Firmware",
            "value": "not source/type eq 'Firmware'"
          },
          "populated": {
            "summary": "Filter that the groupId contains a value",
            "description": "Return resources with populated groupId",
            "value": "not groupId eq null"
          },
          "contains": {
            "summary": "Filter that field value contains a specific substring",
            "description": "Return resources where associatedServerId contains 299765-R18",
            "value": "contains(associatedServerId,'299765-R18')"
          },
          "and": {
            "summary": "Filter on multiple conditionals",
            "description": "Return resources where group is populated and associatedServerId contains 299765-R18",
            "value": "not groupId eq null and contains(associatedServerId,'299765-R18')"
          },
          "alternatives": {
            "summary": "Filter for a value to have one of multiple possibilities",
            "description": "Return resources where the type subfield is either Server or Firmware",
            "value": "source/type in ('Server','Firmware')"
          }
        }
      },
      "contentTypeHeaderPatch": {
        "name": "Content-Type",
        "in": "header",
        "description": "Content-Type header must designate 'application/merge-patch+json' in order for the request to be performed.",
        "required": true,
        "schema": {
          "type": "string",
          "const": "application/merge-patch+json"
        }
      },
      "contentTypeHeaderJson": {
        "name": "Content-Type",
        "in": "header",
        "description": "Content-Type header must designate 'application/json' in order for the request to be performed.",
        "required": true,
        "schema": {
          "type": "string",
          "const": "application/json"
        }
      },
      "sortParam": {
        "in": "query",
        "name": "sort",
        "description": "The order in which to return the resources in the collection.\n\nThe value of the sort query parameter is a comma separated list of sort expressions. \nEach sort expression is a property name optionally followed by a direction indicator asc (ascending) or desc \n(descending).\n\nThe first sort expression in the list defines the primary sort order, the second defines the secondary sort order, \nand so on. If a direciton indicator is omitted the default direction is ascending.",
        "schema": {
          "type": "string"
        },
        "examples": {
          "name-asc": {
            "summary": "ascending by name",
            "description": "Order resources ascending by name",
            "value": "name asc"
          },
          "name-createdAt-desc": {
            "summary": "ascending by name and then by descending by createdAt",
            "description": "Order resources ascending by name and then by descending by createdAt",
            "value": "name,createdAt desc"
          }
        }
      },
      "idempotencyKeyHeader": {
        "name": "Idempotency-Key",
        "in": "header",
        "description": "A unique value generated by the client which the server uses to recognize subsequent retries of the same request.",
        "required": false,
        "example": "2c578105-adeb-4785-9113-8c577a0681fa",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "ifMatchHeader": {
        "name": "If-Match",
        "in": "header",
        "description": "Value which must match the \"generation\" property of the resource in order for the request to be performed.",
        "required": false,
        "example": "\"3\"",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "resourceCollection2": {
        "type": "object",
        "required": [
          "count"
        ],
        "properties": {
          "offset": {
            "type": "integer",
            "description": "Zero-based resource offset",
            "minimum": 0
          },
          "count": {
            "type": "integer",
            "description": "Number of items returned",
            "example": 1,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "description": "Total number of items in the collection that match the filter query",
            "example": 12,
            "minimum": 0
          },
          "items": {
            "type": "array"
          }
        }
      },
      "healthState": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "OK",
          "WARNING",
          "CRITICAL",
          "READY",
          "NOT_PRESENT"
        ],
        "description": "Health state"
      },
      "redundancyState": {
        "type": "string",
        "enum": [
          "NON_REDUNDANT",
          "REDUNDANT",
          "NOT_PRESENT",
          "UNKNOWN"
        ],
        "description": "Redundancy state"
      },
      "firmwareInventoryItem-v1beta2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "deviceContext": {
            "type": "string"
          }
        }
      },
      "firmwareInventoryUpdate-v1beta2": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the firmware component that was updated",
            "type": "string"
          },
          "version": {
            "description": "Version of the firmware that the component was updated to",
            "type": "string"
          },
          "status": {
            "description": "Status of the firmware update",
            "type": "string",
            "enum": [
              "OK",
              "FAILED"
            ]
          }
        }
      },
      "server-v1beta2": {
        "description": "Server",
        "type": "object",
        "required": [
          "id",
          "type",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "description": "Primary identifier for the server given by the system",
            "type": "string",
            "format": "productId+serialNumber"
          },
          "name": {
            "description": "Name given to resource",
            "type": "string",
            "example": "myServer"
          },
          "type": {
            "description": "Type of the resource",
            "type": "string",
            "const": "compute-ops/server"
          },
          "resourceUri": {
            "description": "URI to the server itself (i.e. a self link)",
            "type": "string",
            "format": "uri-reference",
            "example": "/compute-ops/v1beta2/servers/875765-S01+1M512501AB"
          },
          "generation": {
            "description": "Monotonically increasing update counter",
            "type": "integer",
            "minimum": 1
          },
          "createdAt": {
            "description": "Time of server creation",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "Time of the last server update",
            "type": "string",
            "format": "date-time"
          },
          "platformFamily": {
            "description": "Plaform Family of the server",
            "type": [
              "string",
              null
            ],
            "enum": [
              "PROLIANT"
            ]
          },
          "hardware": {
            "type": "object",
            "title": "hardware",
            "description": "Server hardware details",
            "properties": {
              "serialNumber": {
                "type": "string"
              },
              "model": {
                "type": "string"
              },
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "productId": {
                "type": "string"
              },
              "powerState": {
                "type": "string",
                "description": "This will be a mix of power states and reset types.",
                "enum": [
                  "UNKNOWN",
                  "ON",
                  "OFF",
                  "POWERING_ON",
                  "POWERING_OFF",
                  "RESET"
                ]
              },
              "indicatorLed": {
                "type": "string",
                "enum": [
                  "UNKNOWN",
                  "LIT",
                  "BLINKING",
                  "OFF"
                ]
              },
              "health": {
                "type": "object",
                "title": "health",
                "description": "Server health details",
                "properties": {
                  "summary": {
                    "description": "Calculated summary of the overall health",
                    "$ref": "#/components/schemas/healthState"
                  },
                  "fans": {
                    "$ref": "#/components/schemas/healthState"
                  },
                  "fanRedundancy": {
                    "$ref": "#/components/schemas/redundancyState"
                  },
                  "liquidCooling": {
                    "$ref": "#/components/schemas/healthState"
                  },
                  "liquidCoolingRedundancy": {
                    "$ref": "#/components/schemas/redundancyState"
                  },
                  "memory": {
                    "$ref": "#/components/schemas/healthState"
                  },
                  "network": {
                    "$ref": "#/components/schemas/healthState"
                  },
                  "powerSupplies": {
                    "$ref": "#/components/schemas/healthState"
                  },
                  "powerSupplyRedundancy": {
                    "$ref": "#/components/schemas/redundancyState"
                  },
                  "processor": {
                    "$ref": "#/components/schemas/healthState"
                  },
                  "storage": {
                    "$ref": "#/components/schemas/healthState"
                  },
                  "temperature": {
                    "$ref": "#/components/schemas/healthState"
                  },
                  "bios": {
                    "$ref": "#/components/schemas/healthState"
                  },
                  "smartStorage": {
                    "$ref": "#/components/schemas/healthState"
                  },
                  "healthLED": {
                    "$ref": "#/components/schemas/healthState"
                  }
                }
              },
              "bmc": {
                "type": "object",
                "title": "bmc",
                "description": "iLO BMC details",
                "properties": {
                  "mac": {
                    "type": "string"
                  },
                  "ip": {
                    "type": "string"
                  },
                  "hostname": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "state": {
            "type": "object",
            "title": "state",
            "description": "Server connectivity state",
            "properties": {
              "managed": {
                "type": "boolean"
              },
              "connected": {
                "type": "boolean"
              },
              "connectedModifiedAt": {
                "type": "string",
                "format": "date-time"
              },
              "subscriptionState": {
                "description": "Subscription State",
                "type": "string",
                "enum": [
                  "REQUIRED",
                  "SUBSCRIBED",
                  "EXPIRED"
                ]
              },
              "subscriptionTier": {
                "description": "Subscription Tier",
                "type": [
                  "string",
                  null
                ],
                "enum": [
                  "Standard",
                  "Enhanced"
                ]
              },
              "subscriptionExpiresAt": {
                "description": "Subscription validity end date",
                "type": [
                  "string",
                  null
                ],
                "format": "date-time"
              }
            }
          },
          "firmwareInventory": {
            "description": "Firmware Inventory",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/firmwareInventoryItem-v1beta2"
            }
          },
          "firmwareBundleUri": {
            "type": [
              "string",
              null
            ]
          },
          "lastFirmwareUpdate": {
            "description": "Details of the last firmware update",
            "type": [
              "object",
              null
            ],
            "properties": {
              "status": {
                "description": "Status of the last firmware update",
                "type": "string",
                "enum": [
                  "OK",
                  "FAILED"
                ]
              },
              "attemptedAt": {
                "description": "Date in which the last firmware update job was attempted",
                "type": "string",
                "format": "date-time"
              },
              "firmwareInventoryUpdates": {
                "description": "List of the components updated by the last firmware update",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/firmwareInventoryUpdate-v1beta2"
                }
              }
            }
          },
          "tags": {
            "description": "Extra identifiers a server",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "location": "San Jose"
            }
          },
          "processorVendor": {
            "description": "Type and brand of processor",
            "type": "string",
            "example": "Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz"
          },
          "biosFamily": {
            "description": "Bios version",
            "type": "string"
          },
          "host": {
            "type": "object",
            "title": "host",
            "description": "host details",
            "properties": {
              "osName": {
                "type": "string"
              },
              "osVersion": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "osDescription": {
                "type": "string"
              },
              "osType": {
                "type": "integer"
              }
            }
          },
          "autoIloFwUpdate": {
            "type": "boolean",
            "description": "To opt in for automatic iLO-only firmware update"
          }
        }
      },
      "serverCollection-v1beta2": {
        "allOf": [
          {
            "description": "Server collection"
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "items",
              "total"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/server-v1beta2"
                }
              }
            }
          }
        ]
      },
      "errorDetailBadRequest": {
        "type": "object",
        "description": "Additional information on why the request is bad",
        "required": [
          "type",
          "issues"
        ],
        "properties": {
          "type": {
            "type": "string",
            "const": "hpe.greenlake.bad_request"
          },
          "issues": {
            "type": "array",
            "description": "List of bad request issues",
            "items": {
              "type": "object",
              "required": [
                "source",
                "subject"
              ],
              "properties": {
                "source": {
                  "type": "string",
                  "description": "The part of the request with an issue",
                  "enum": [
                    "field",
                    "header",
                    "query.parameter"
                  ]
                },
                "subject": {
                  "type": "string",
                  "description": "The specific issue key. For example, if the `source` property is `field`, the subject is the dot-separated property name the issue is about.",
                  "example": "user.phone"
                },
                "description": {
                  "type": "string",
                  "description": "A user-friendly description of the issue"
                }
              }
            }
          }
        }
      },
      "errorDetailGeneral": {
        "type": "object",
        "description": "General metadata about the error",
        "required": [
          "type",
          "source",
          "metadata"
        ],
        "properties": {
          "type": {
            "type": "string",
            "const": "hpe.greenlake.metadata"
          },
          "source": {
            "type": "string",
            "description": "Source of the error, typically the API group",
            "const": "compute-ops"
          },
          "metadata": {
            "type": "object",
            "description": "Additional key value pairs that provide information about this error.",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "errorDetailPreconditionFailed": {
        "type": "object",
        "description": "Additional information on why the request failed the preconditions",
        "required": [
          "type",
          "issues"
        ],
        "properties": {
          "type": {
            "type": "string",
            "const": "hpe.greenlake.precondition_failed"
          },
          "issues": {
            "type": "array",
            "description": "List of precondition issues",
            "items": {
              "type": "object",
              "required": [
                "source",
                "subject"
              ],
              "properties": {
                "source": {
                  "type": "string",
                  "description": "A service specific type of the format"
                },
                "subject": {
                  "type": "string",
                  "description": "The specific issue"
                },
                "description": {
                  "type": "string",
                  "description": "A user-friendly description of how the precondition failed"
                }
              }
            }
          }
        }
      },
      "errorDetailRetryInfo": {
        "type": "object",
        "description": "Information on how to retry a request as a result of a rate limit error",
        "required": [
          "type",
          "retryAfterSeconds"
        ],
        "properties": {
          "type": {
            "type": "string",
            "const": "hpe.greenlake.retry_info"
          },
          "retryAfterSeconds": {
            "type": "integer",
            "description": "Seconds to wait before retrying"
          }
        }
      },
      "errorDetail": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/errorDetailBadRequest"
          },
          {
            "$ref": "#/components/schemas/errorDetailGeneral"
          },
          {
            "$ref": "#/components/schemas/errorDetailPreconditionFailed"
          },
          {
            "$ref": "#/components/schemas/errorDetailRetryInfo"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "hpe.greenlake.bad_request": "#/components/schemas/errorDetailBadRequest",
            "hpe.greenlake.metadata": "#/components/schemas/errorDetailGeneral",
            "hpe.greenlake.precondition_failed": "#/components/schemas/errorDetailPreconditionFailed",
            "hpe.greenlake.retry_info": "#/components/schemas/errorDetailRetryInfo"
          }
        }
      },
      "errorResponse": {
        "type": "object",
        "description": "Standard error response when an AIP has an error",
        "required": [
          "httpStatusCode",
          "errorCode",
          "message",
          "debugId"
        ],
        "properties": {
          "httpStatusCode": {
            "type": "integer",
            "description": "HTTP equivalent status code",
            "minimum": 400,
            "maximum": 599,
            "example": 400
          },
          "errorCode": {
            "type": "string",
            "description": "Unique machine-friendly identifier for the error",
            "example": "HPE-GL-COMPUTE_OPS-0500001"
          },
          "message": {
            "type": "string",
            "description": "User-friendly error message"
          },
          "debugId": {
            "type": "string",
            "description": "Unique identifier for the instance of this error"
          },
          "errorDetails": {
            "type": "array",
            "description": "Additional detailed information about the error",
            "items": {
              "$ref": "#/components/schemas/errorDetail"
            }
          }
        }
      },
      "serverUpdateRequest-v1beta2": {
        "type": "object",
        "properties": {
          "autoIloFwUpdate": {
            "description": "To opt in for automatic iLO-only firmware update",
            "type": "boolean",
            "default": true
          }
        }
      },
      "alert-v1beta2": {
        "description": "Server hardware alert",
        "type": "object",
        "required": [
          "id",
          "type",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "description": "Primary identifier for the alert given by the system",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "description": "Type of the resource",
            "type": "string",
            "const": "compute-ops/alert"
          },
          "generation": {
            "description": "Monotonically increasing update counter",
            "type": "integer",
            "minimum": 1
          },
          "createdAt": {
            "description": "Time of alert creation",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "Time of the last alert update",
            "type": "string",
            "format": "date-time"
          },
          "serverId": {
            "description": "ID of the server to which this alert is associated",
            "type": "string"
          },
          "severity": {
            "type": "string",
            "enum": [
              "OK",
              "WARNING",
              "CRITICAL",
              "UNKNOWN",
              "NOT_PRESENT",
              "REDUNDANT",
              "NON_REDUNDANT"
            ]
          },
          "description": {
            "type": "string"
          },
          "resolution": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "category": {
            "type": "string"
          },
          "serviceEvent": {
            "type": "boolean"
          }
        }
      },
      "alertCollection-v1beta2": {
        "allOf": [
          {
            "description": "Alert collection"
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "items",
              "total"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/alert-v1beta2"
                }
              }
            }
          }
        ]
      },
      "notificationsResponse-v1beta2": {
        "type": "object",
        "properties": {
          "serverId": {
            "type": "string"
          },
          "criticalNotification": {
            "type": "boolean"
          }
        }
      },
      "notificationsRequest-v1beta2": {
        "required": [
          "criticalNotification"
        ],
        "type": "object",
        "properties": {
          "criticalNotification": {
            "type": "boolean"
          }
        }
      },
      "serverRawInventoryItem-v1beta2": {
        "type": "object",
        "description": "JSON data that describes the raw intentory of a server",
        "format": "JSON",
        "additionalProperties": {
          "type": [
            "string",
            null
          ]
        }
      },
      "rawInventory-v1beta2": {
        "description": "Server raw inventories",
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "description": "Primary identifier for the device given by the system",
            "type": "string"
          },
          "type": {
            "description": "Type of the resource",
            "type": "string",
            "const": "compute-ops/server/raw-inventory"
          },
          "serial": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "firmwareInventory": {
            "description": "Firmware Inventory",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/serverRawInventoryItem-v1beta2"
            }
          },
          "softwareInventory": {
            "description": "Software Inventory",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/serverRawInventoryItem-v1beta2"
            }
          },
          "storageInventory": {
            "description": "JSON data that describes Storage Inventory",
            "type": "object",
            "format": "JSON",
            "additionalProperties": {
              "type": [
                "string",
                null
              ]
            }
          },
          "pciDevices": {
            "description": "PCI devices",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/serverRawInventoryItem-v1beta2"
            }
          },
          "smartUpdateTool": {
            "description": "JSON data that describes Integrated Smart Update Tools settings",
            "type": "object",
            "format": "JSON",
            "additionalProperties": {
              "type": [
                "string",
                null
              ]
            }
          }
        }
      },
      "jobState": {
        "type": "string",
        "enum": [
          "PENDING",
          "RUNNING",
          "STALLED",
          "ERROR",
          "COMPLETE"
        ],
        "description": "The current state of a job, indicating whether a job is waiting, running, or terminal"
      },
      "job-v1beta2": {
        "description": "Job",
        "type": "object",
        "required": [
          "id",
          "type",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "description": "Primary identifier for the job given by the system",
            "type": "string",
            "format": "uuid"
          },
          "parentJobId": {
            "description": "The identifier of a job which triggered this job",
            "type": [
              "string",
              null
            ],
            "format": "uuid"
          },
          "type": {
            "description": "Type of the resource",
            "type": "string",
            "const": "compute-ops/job"
          },
          "resourceUri": {
            "description": "URI to the job itself (i.e. a self link)",
            "type": "string",
            "format": "uri-reference",
            "example": "/compute-ops/v1beta2/jobs/2500759c-b7dd-4c68-ab7e-6b644bcf4b9c"
          },
          "name": {
            "description": "Name for the job",
            "type": "string"
          },
          "generation": {
            "description": "Monotonically increasing update counter",
            "type": "integer",
            "minimum": 1
          },
          "createdAt": {
            "description": "Time of job creation",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "Time of the last job update",
            "type": "string",
            "format": "date-time"
          },
          "jobTemplateUri": {
            "type": "string"
          },
          "associatedResourceUri": {
            "type": "string"
          },
          "resource": {
            "type": "object",
            "title": "resource",
            "description": "Reference to the resource this job is operating against",
            "properties": {
              "resourceUri": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "data": {
            "description": "Data needed for this job",
            "type": "object",
            "title": "data",
            "additionalProperties": {
              "type": "string"
            }
          },
          "state": {
            "$ref": "#/components/schemas/jobState"
          },
          "status": {
            "type": "string"
          },
          "statusDetails": {
            "description": "Additional information about the jobs status",
            "type": [
              "object",
              null
            ]
          }
        }
      },
      "jobCollection-v1beta2": {
        "allOf": [
          {
            "description": "Job Collection"
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "items",
              "total"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/job-v1beta2"
                }
              }
            }
          }
        ]
      },
      "jobCreate-v1beta2": {
        "description": "Create a job",
        "type": "object",
        "required": [
          "jobTemplateUri",
          "resourceUri"
        ],
        "properties": {
          "jobTemplateUri": {
            "description": "A job-template URI with the durable Template ID of the job",
            "type": "string",
            "format": "uri-reference",
            "example": "/compute-ops/v1beta2/job-templates/0cbb2377-1834-488d-840c-d5bf788c34fb"
          },
          "resourceUri": {
            "description": "A resource URI that the job will operate on",
            "type": "string",
            "format": "uri-reference",
            "example": "/compute-ops/v1beta2/servers/abc+123"
          },
          "data": {
            "description": "Any additional data required by this job",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "jobUpdate-v1beta2": {
        "description": "Job update",
        "type": "object",
        "properties": {
          "state": {
            "description": "New state for the job (currently only Error is supported)",
            "type": "string",
            "enum": [
              "ERROR"
            ]
          }
        }
      },
      "job-v1beta3": {
        "description": "Job",
        "type": "object",
        "required": [
          "id",
          "type",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "description": "Primary identifier for the job given by the system",
            "type": "string",
            "format": "uuid",
            "example": "2500759c-b7dd-4c68-ab7e-6b644bcf4b9c"
          },
          "parentJobId": {
            "description": "The identifier of a job which triggered this job",
            "type": [
              "string",
              null
            ],
            "format": "uuid",
            "example": "284f3b7a-7a17-4f0a-9b40-a51bc887c7d0"
          },
          "type": {
            "description": "Type of the resource",
            "type": "string",
            "const": "compute-ops/job"
          },
          "resourceUri": {
            "description": "URI to the job itself (i.e. a self link)",
            "type": "string",
            "format": "uri-reference",
            "example": "/compute-ops/v1beta3/jobs/2500759c-b7dd-4c68-ab7e-6b644bcf4b9c"
          },
          "name": {
            "description": "Name for the job",
            "type": "string",
            "example": "FirmwareUpdate.New"
          },
          "generation": {
            "description": "Monotonically increasing update counter",
            "type": "integer",
            "minimum": 1,
            "example": 9
          },
          "createdAt": {
            "description": "Time of job creation",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "Time of the last job update",
            "type": "string",
            "format": "date-time"
          },
          "jobTemplateUri": {
            "description": "URI to the job template this job is using",
            "type": "string",
            "example": "/compute-ops/v1beta2/job-templates/fd54a96c-cabc-42e3-aee3-374a2d009dba"
          },
          "associatedResourceUri": {
            "description": "URI to the resource this job is operating against",
            "type": "string",
            "example": "/compute-ops/v1beta2/servers/744674-N19+8899744674319686"
          },
          "resource": {
            "type": "object",
            "title": "resource",
            "description": "Reference to the resource this job is operating against",
            "properties": {
              "resourceUri": {
                "type": "string",
                "example": "/compute-ops/v1beta2/servers/744674-N19+8899744674319686"
              },
              "type": {
                "type": "string",
                "example": "servers"
              }
            }
          },
          "data": {
            "description": "Data needed for this job",
            "type": "object",
            "title": "data",
            "example": {
              "state_reason_message": {
                "message_id": "FWI-100",
                "message_args": [
                  "SPP 2022.12.00.00 (19 Dec 2022)"
                ]
              }
            },
            "additionalProperties": {
              "type": "string"
            }
          },
          "state": {
            "$ref": "#/components/schemas/jobState"
          },
          "resultCode": {
            "description": "Result code representing the outcome of a completed job",
            "type": [
              "string",
              null
            ],
            "enum": [
              "SUCCESS",
              "FAILURE"
            ]
          },
          "status": {
            "description": "Status message about the job",
            "type": "string"
          },
          "statusDetails": {
            "description": "Additional information about the job's status",
            "type": [
              "object",
              null
            ]
          }
        }
      },
      "jobCollection-v1beta3": {
        "allOf": [
          {
            "description": "Job Collection"
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "items",
              "total"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/job-v1beta3"
                }
              }
            }
          }
        ]
      },
      "jobCreate-v1beta3": {
        "description": "Create a job",
        "type": "object",
        "required": [
          "jobTemplateUri",
          "resourceUri"
        ],
        "properties": {
          "jobTemplateUri": {
            "type": "string",
            "description": "URI of the job template for this job",
            "example": "/compute-ops/v1beta2/job-templates/aacfb3e0-6575-4d4f-a711-1ee1ae768407"
          },
          "resourceUri": {
            "type": "string",
            "description": "Reference to the resource to run this job on",
            "example": "/compute-ops/v1beta2/servers/744674-N19+8899744674319686"
          },
          "data": {
            "description": "Data needed for this job (based on the job schema)",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "jobUpdate-v1beta3": {
        "description": "Job update",
        "type": "object",
        "properties": {
          "state": {
            "description": "New state for the job (currently only Complete or Error is supported)",
            "type": "string",
            "enum": [
              "COMPLETE",
              "ERROR"
            ]
          }
        }
      },
      "jobTemplate-v1beta2": {
        "description": "Job template",
        "type": "object",
        "required": [
          "id",
          "type",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "description": "Primary identifier for the job template given by the system",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "description": "Type of the resource",
            "type": "string",
            "const": "compute-ops/job-template"
          },
          "resourceUri": {
            "description": "URI to the job template itself (i.e. a self link)",
            "type": "string",
            "format": "uri-reference",
            "example": "/compute-ops/v1beta2/job-templates/e94fea5a-115e-41b2-8ca2-406b4bf710df"
          },
          "generation": {
            "description": "Monotonically increasing update counter",
            "type": "integer",
            "minimum": 1
          },
          "createdAt": {
            "description": "Time of job template creation",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "Time of the last job template update",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "schema": {
            "type": "object",
            "description": "JSON Schema that describes the required data for an instance of this job",
            "format": "JSON",
            "additionalProperties": {
              "type": [
                "string",
                null
              ]
            }
          }
        }
      },
      "jobTemplateCollection-v1beta2": {
        "allOf": [
          {
            "description": "Job template collection"
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "items",
              "total"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/jobTemplate-v1beta2"
                }
              }
            }
          }
        ]
      },
      "activity-v1beta2": {
        "type": "object",
        "required": [
          "id",
          "type",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "description": "Primary identifier for the activity given by the system",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "description": "Type of the resource",
            "type": "string",
            "const": "compute-ops/activity"
          },
          "generation": {
            "description": "Monotonically increasing update counter",
            "type": "integer",
            "minimum": 1
          },
          "createdAt": {
            "description": "Time of activity creation",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "Time of the last activity update",
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "recommendedAction": {
            "type": [
              "string",
              null
            ]
          },
          "source": {
            "type": "object",
            "description": "Reference to the resource that caused this activity",
            "properties": {
              "resourceUri": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              }
            }
          },
          "associatedServerUri": {
            "type": "string"
          }
        }
      },
      "activityCollection-v1beta2": {
        "allOf": [
          {
            "description": "Activity collection"
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "items",
              "total"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/activity-v1beta2"
                }
              }
            }
          }
        ]
      },
      "vmwareAddonInfoItem-v1beta2": {
        "type": "object",
        "description": "JSON data that describes addon and the location of the addon in RDA",
        "format": "JSON",
        "additionalProperties": {
          "type": [
            "string",
            null
          ]
        }
      },
      "firmwareBundle-v1beta2": {
        "type": "object",
        "required": [
          "id",
          "type",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "description": "Primary identifier for the firmware bundle given by the system",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "description": "Type of the resource",
            "type": "string",
            "const": "compute-ops/firmware-bundle"
          },
          "resourceUri": {
            "description": "URI to the firmware bundle itself (i.e. a self link)",
            "type": "string",
            "format": "uri-reference",
            "example": "/compute-ops/v1beta2/firmware-bundles/9a16ec6d-8c71-4338-a58a-6564df331ba2"
          },
          "generation": {
            "description": "Monotonically increasing update counter",
            "type": "integer",
            "minimum": 1
          },
          "createdAt": {
            "description": "Time of firmware bundle creation",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "Time of the last firmware bundle update",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "releaseDate": {
            "type": "string",
            "format": "full-date-rfc3339"
          },
          "releaseVersion": {
            "type": "string"
          },
          "releaseNotes": {
            "type": "string"
          },
          "supportUrl": {
            "type": "string"
          },
          "enhancements": {
            "type": "string"
          },
          "advisories": {
            "type": "string"
          },
          "supportedOsList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean"
          },
          "summary": {
            "type": "string"
          },
          "bundleType": {
            "type": "string",
            "enum": [
              "BASE",
              "HOTFIX",
              "SUPPLEMENT"
            ]
          },
          "hotfixBaseUri": {
            "type": [
              "string",
              null
            ]
          },
          "vmwareAddonInfo": {
            "description": "Details about addon and the location of the addon in RDA",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vmwareAddonInfoItem-v1beta2"
            }
          }
        }
      },
      "firmwareBundleCollection-v1beta2": {
        "allOf": [
          {
            "description": "Firmware bundle collection"
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "items",
              "total"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/firmwareBundle-v1beta2"
                }
              }
            }
          }
        ]
      },
      "complianceState": {
        "type": "string",
        "enum": [
          "COMPLIANT",
          "NOT_COMPLIANT",
          "UNKNOWN"
        ],
        "description": "This state will help to define the firmware compliance status of the device. At the group level, if one of the device have compliance state as NOT_COMPLIANT then group state will be NOT_COMPLIANT, else if one of the device has compliance state as UNKNOWN then group state will be UNKNOWN, else if all the device has compliance state as COMPLIANT then group state will be COMPLIANT"
      },
      "deviceState": {
        "enum": [
          "ASSIGNED",
          "FAILED",
          "ACTIVE",
          "QUARANTINE",
          "APPLYING_FIRMWARE",
          "APPLYING_SCHEMA",
          "APPLYING_OS"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "subscriptionState": {
        "enum": [
          "REQUIRED",
          "SUBSCRIBED",
          "EXPIRED"
        ],
        "type": "string",
        "description": "Subscription state."
      },
      "subscriptionTier": {
        "enum": [
          "STANDARD",
          "ENHANCED"
        ],
        "type": "string",
        "description": "Subscription tier."
      },
      "deviceResponse-v1beta2": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "description": "Primary identifier for the device given by the system",
            "type": "string"
          },
          "type": {
            "description": "Type of the resource",
            "type": "string",
            "const": "compute-ops/device"
          },
          "resourceUri": {
            "description": "URI to the device itself (i.e. a self link)",
            "type": "string",
            "format": "uri-reference",
            "example": "/compute-ops/v1beta2/groups/6081a383-b9e5-45e3-8371-1e0ba7b72068/devices/873357-P04+WKQ82425HD"
          },
          "serial": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "eTag": {
            "type": "string"
          },
          "serverId": {
            "type": "string"
          },
          "serverUri": {
            "type": "string",
            "example": "/api/compute/v1/servers/873357-P04+WKQ82425HD"
          },
          "state": {
            "$ref": "#/components/schemas/deviceState"
          },
          "groupId": {
            "type": "string",
            "format": "uuid"
          },
          "subscriptionState": {
            "$ref": "#/components/schemas/subscriptionState"
          },
          "subscriptionTier": {
            "$ref": "#/components/schemas/subscriptionTier"
          }
        }
      },
      "noSettingsReason": {
        "enum": [
          "GROUP_HAS_NO_SETTINGS",
          "GROUP_HAS_NO_AUTO_POLICY",
          "SERVER_IS_NOT_LICENSED"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "noSettingsMeta-v1beta2": {
        "type": "object",
        "properties": {
          "noSettingsReason": {
            "$ref": "#/components/schemas/noSettingsReason"
          }
        },
        "additionalProperties": false
      },
      "settingsAppliedMeta-v1beta2": {
        "type": "object",
        "properties": {
          "deviceCount": {
            "exclusiveMinimum": 0,
            "minimum": 1,
            "type": "integer"
          },
          "appliedCount": {
            "minimum": 0,
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "groupResponse-v1beta2": {
        "required": [
          "id",
          "type",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Primary identifier for the group given by the system",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "description": "Type of the resource",
            "type": "string",
            "const": "compute-ops/group"
          },
          "resourceUri": {
            "description": "URI to the group itself (i.e. a self link)",
            "type": "string",
            "format": "uri-reference",
            "example": "/compute-ops/v1beta2/groups/0e7f516c-0829-4135-83d6-09ce844ddd9d"
          },
          "name": {
            "description": "Name for the group given by the user",
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "Production Group"
          },
          "generation": {
            "description": "Monotonically increasing update counter",
            "type": "integer",
            "minimum": 1
          },
          "createdAt": {
            "description": "Time of group creation",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "Time of the last group update",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "All prod servers"
          },
          "autoFwUpdateOnAdd": {
            "description": "Enabled automatic firmware updates to the configured baseline when a server is added to a group",
            "type": "boolean"
          },
          "groupComplianceStatus": {
            "$ref": "#/components/schemas/complianceState"
          },
          "serverSettingsUris": {
            "type": "array",
            "description": "URIs for group server settings",
            "items": {
              "type": "string"
            },
            "default": [],
            "example": [
              "/compute-ops/v1beta1/server-settings/00000000-0000-0000-0000-800000000001"
            ]
          },
          "platformFamily": {
            "type": [
              "string"
            ],
            "enum": [
              "ANY",
              "PROLIANT"
            ],
            "description": "Platform family of all servers in this group. There are no restrictions for groups and all supported server types are allowed. This optional attribute will be set to a default value of \"ANY\", to indicate that any platform family servers can be in this group, regardless of the value passed in.",
            "default": "ANY",
            "example": "ANY"
          },
          "devicesUri": {
            "type": "string",
            "example": "/compute-ops/v1beta2/groups/6081a383-b9e5-45e3-8371-1e0ba7b72068/devices"
          },
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/deviceResponse-v1beta2"
            },
            "default": []
          },
          "serverPolicies": {
            "type": "object",
            "description": "Stores policy settings for server group actions",
            "properties": {
              "onServerAdd": {
                "type": "object",
                "description": "Policies to be applied when a server is added to a group",
                "properties": {
                  "firmwareDowngrade": {
                    "type": "boolean",
                    "default": false,
                    "description": "Allow downgrade of firmware when firmware update is performed on server addition to a group. Valid only when firmware update is set to true"
                  },
                  "firmwareUpdate": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enabled automatic firmware updates to the configured baseline when a server is added to a group"
                  },
                  "biosApplySettings": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable automatic application of BIOS settings when a server is added to a group. A server group must have one of the HPE pre-defined BIOS/Workload profiles to allow the auto apply of BIOS settings."
                  },
                  "storageConfiguration": {
                    "type": "boolean",
                    "default": false,
                    "description": "When server is added to the group, the OS volume will be created immediately if the server is activated or when the server is activated at a later time."
                  },
                  "storageVolumeDeletion": {
                    "type": "boolean",
                    "default": false,
                    "description": "When server is added to the group, any existing internal storage configuration will be erased prior to creating the new OS volume if the server is activated or when the server is activated at a later time."
                  },
                  "storageVolumeName": {
                    "type": "boolean",
                    "default": false,
                    "description": "When a server is added to the group, associate a name with the created volume if the server is activated or when the server is activated at a later time."
                  }
                }
              }
            }
          },
          "autoAddServerTags": {
            "description": "User configured tag used for the automatic assignment of a server to a group",
            "type": "object",
            "example": {
              "Department": "Development"
            }
          },
          "groupMeta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/noSettingsMeta-v1beta2"
              },
              {
                "$ref": "#/components/schemas/settingsAppliedMeta-v1beta2"
              },
              {
                "type": [
                  null
                ]
              }
            ]
          }
        }
      },
      "groupCollection-v1beta2": {
        "allOf": [
          {
            "description": "Group collection"
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "items"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/groupResponse-v1beta2"
                }
              }
            }
          }
        ]
      },
      "groupCreateRequest-v1beta2": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "example": "Production Group"
          },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "All prod servers"
          },
          "autoFwUpdateOnAdd": {
            "description": "Enable automatic firmware updates to the configured baseline when a server is added to a group, This is equivalent to firmwareUpdate under serverPolicies. The value must be same if both are provided",
            "type": "boolean",
            "default": false
          },
          "platformFamily": {
            "type": [
              "string"
            ],
            "description": "Platform family of all servers in this group. There are no restrictions for groups and all supported server types are allowed. This optional attribute will be set to a default value of \"ANY\", to indicate that any platform family servers can be in this group, regardless of the value passed in.",
            "enum": [
              "ANY",
              "PROLIANT"
            ],
            "default": "ANY"
          },
          "serverSettingsUris": {
            "type": "array",
            "description": "URIs for group server settings",
            "items": {
              "type": "string"
            },
            "default": [],
            "example": [
              "/compute-ops/v1beta1/server-settings/00000000-0000-0000-0000-800000000001"
            ]
          },
          "data": {
            "type": "object",
            "default": {}
          },
          "serverPolicies": {
            "type": "object",
            "description": "Stores policy settings for server group actions",
            "properties": {
              "onServerAdd": {
                "type": "object",
                "description": "Policies to be applied when a server is added to a group",
                "properties": {
                  "firmwareDowngrade": {
                    "type": "boolean",
                    "default": false,
                    "description": "Allow downgrade of firmware when firmware update is performed on server addition to a group. Valid only when firmware update is set to true"
                  },
                  "firmwareUpdate": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable automatic firmware updates to the configured baseline when a server is added to a group, This is equivalent to autoFwUpdateOnAdd. The value must be same if both are provided"
                  },
                  "biosApplySettings": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable automatic application of BIOS settings when a server is added to a group. A server group must have one of the HPE pre-defined BIOS/Workload profiles to allow the auto apply of BIOS settings."
                  },
                  "storageConfiguration": {
                    "type": "boolean",
                    "default": false,
                    "description": "When server is added to the group, the OS volume will be created immediately if the server is activated or when the server is activated at a later time."
                  },
                  "storageVolumeDeletion": {
                    "type": "boolean",
                    "default": false,
                    "description": "When server is added to the group, any existing internal storage configuration will be erased prior to creating the new OS volume if the server is activated or when the server is activated at a later time."
                  },
                  "storageVolumeName": {
                    "type": "boolean",
                    "default": false,
                    "description": "When a server is added to the group, associate a name with the created volume if the server is activated or when the server is activated at a later time."
                  }
                }
              }
            }
          },
          "autoAddServerTags": {
            "description": "User configured tag used for the automatic assignment of a server to a group",
            "type": "object",
            "example": {
              "Department": "Development"
            }
          }
        }
      },
      "groupUpdateRequest-v1beta2": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "example": "Production Group"
          },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "All prod servers"
          },
          "serverSettingsUris": {
            "title": "Serversettingsuris",
            "description": "URIs for group server settings",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "example": [
              "/api/compute/v1/server-settings/00000000-0000-0000-0000-800000000001"
            ]
          },
          "autoFwUpdateOnAdd": {
            "description": "Enable automatic firmware updates to the configured baseline when a server is added to a group, This is equivalent to firmwareUpdate under serverPolicies. The value must be same if both are provided",
            "type": "boolean",
            "default": false
          },
          "serverPolicies": {
            "type": "object",
            "description": "Stores policy settings for server group actions",
            "properties": {
              "onServerAdd": {
                "type": "object",
                "description": "Policies to be applied when a server is added to a group",
                "properties": {
                  "firmwareDowngrade": {
                    "type": "boolean",
                    "default": false,
                    "description": "Allow downgrade of firmware when firmware update is performed on server addition to a group. Valid only when firmware update is set to true"
                  },
                  "firmwareUpdate": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable automatic firmware updates to the configured baseline when a server is added to a group, This is equivalent to autoFwUpdateOnAdd. The value must be same if both are provided"
                  },
                  "biosApplySettings": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable automatic application of BIOS settings when a server is added to a group. A server group must have one of the HPE pre-defined BIOS/Workload profiles to allow the auto apply of BIOS settings."
                  },
                  "storageConfiguration": {
                    "type": "boolean",
                    "default": false,
                    "description": "When server is added to the group, the OS volume will be created immediately if the server is activated or when the server is activated at a later time."
                  },
                  "storageVolumeDeletion": {
                    "type": "boolean",
                    "default": false,
                    "description": "When server is added to the group, any existing internal storage configuration will be erased prior to creating the new OS volume if the server is activated or when the server is activated at a later time."
                  },
                  "storageVolumeName": {
                    "type": "boolean",
                    "default": false,
                    "description": "When a server is added to the group, associate a name with the created volume if the server is activated or when the server is activated at a later time."
                  }
                }
              }
            }
          },
          "autoAddServerTags": {
            "description": "User configured tag used for the automatic assignment of a server to a group",
            "type": "object",
            "example": {
              "Department": "Development"
            }
          }
        }
      },
      "deviceResponseCollection-v1beta2": {
        "allOf": [
          {
            "description": "Device collection"
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "items"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/deviceResponse-v1beta2"
                }
              }
            }
          }
        ]
      },
      "deviceRequest-v1beta2": {
        "type": "object",
        "properties": {
          "serial": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "eTag": {
            "type": "string"
          },
          "serverId": {
            "type": "string"
          }
        }
      },
      "groupAssignRequest-v1beta2": {
        "required": [
          "devices"
        ],
        "type": "object",
        "properties": {
          "devices": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/deviceRequest-v1beta2"
            }
          }
        }
      },
      "deviceResponseCollectionNew-v1beta2": {
        "required": [
          "devices"
        ],
        "type": "object",
        "properties": {
          "devices": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/deviceResponse-v1beta2"
            }
          }
        }
      },
      "deviceDeviation-v1beta2": {
        "description": "Device deviation details",
        "type": "object",
        "properties": {
          "componentName": {
            "type": "string",
            "description": "Description of the firmware component which has a deviation with group firmware baseline"
          },
          "installedVersion": {
            "type": "string",
            "description": "Installed version of firmware component"
          },
          "expectedVersion": {
            "type": "string",
            "description": "Expected version for firmware component"
          },
          "componentFilename": {
            "type": "string",
            "description": "Name of the firmware component file"
          }
        }
      },
      "deviceCompliance-v1beta2": {
        "description": "Device compliance details",
        "required": [
          "id",
          "type",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Primary identifier for the compliance given by the system",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "description": "Type of the resource",
            "type": "string",
            "const": "compute-ops/group/compliance"
          },
          "generation": {
            "description": "Monotonically increasing update counter",
            "type": "integer",
            "minimum": 1
          },
          "createdAt": {
            "description": "Time of compliance entry creation",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "This refers to when the firmware compliance was checked."
          },
          "resourceUri": {
            "description": "URI to the deviceCompliance itself (i.e. a self link)",
            "type": "string",
            "format": "uri-reference",
            "example": "/compute-ops/v1beta2/groups/c26e618b-4048-4aee-8e75-fbc984897a51/compliance/b73718fb-30c3-4b0f-bee3-f5dd598414f3"
          },
          "groupId": {
            "type": "string",
            "format": "uuid"
          },
          "serial": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "serverId": {
            "type": "string"
          },
          "complianceStatus": {
            "$ref": "#/components/schemas/complianceState"
          },
          "deviations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/deviceDeviation-v1beta2"
            }
          },
          "errorReason": {
            "type": "string",
            "description": "It will have the reason for why the compliance state is UNKNOWN. for other compliance states it will be empty string."
          }
        }
      },
      "deviceComplianceCollection-v1beta2": {
        "allOf": [
          {
            "description": "Device compliance collection"
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "items"
            ],
            "properties": {
              "start": {
                "type": "integer",
                "description": "Zero-based resource offset, alias of `offset`",
                "minimum": 0
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/deviceCompliance-v1beta2"
                }
              }
            }
          }
        ]
      },
      "reportType": {
        "type": "string",
        "description": "The type of report.  New report types may be added as a backward compatible change to the API.",
        "enum": [
          "CARBON_FOOTPRINT"
        ]
      },
      "report-v1beta1": {
        "type": "object",
        "description": "The metadata for a report.",
        "properties": {
          "id": {
            "description": "Primary identifier for the report metadata resource given by the system.",
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "843023bd-9412-46c2-8ac2-a3691f657fdb"
          },
          "type": {
            "description": "The type of the resource.",
            "type": "string",
            "readOnly": true,
            "const": "compute-ops/report"
          },
          "generation": {
            "description": "Monotonically increasing update counter.",
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "minimum": 1
          },
          "createdAt": {
            "description": "Time of report resource creation.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-02-11T01:04:20.799937+00:00"
          },
          "updatedAt": {
            "description": "Time of the last update to the report resource.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-02-11T01:04:20.799937+00:00"
          },
          "resourceUri": {
            "description": "URI to the report metadata resource itself (i.e. a self link).",
            "type": "string",
            "format": "uri-reference",
            "readOnly": true,
            "example": "/compute-ops/v1beta1/reports/843023bd-9412-46c2-8ac2-a3691f657fdb"
          },
          "name": {
            "description": "The display name of the report.",
            "type": "string",
            "readOnly": true,
            "example": "Carbon Footprint Report (All Servers)"
          },
          "reportDataStartAt": {
            "description": "Beginning of time range covered by the report.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-02-04T01:04:20+00:00"
          },
          "reportDataEndAt": {
            "description": "End of time range covered by the report.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-02-11T01:04:20+00:00"
          },
          "reportDataUri": {
            "description": "URI to the data for the report.",
            "type": "string",
            "format": "uri-reference",
            "readOnly": true,
            "example": "/compute-ops/v1beta1/reports/843023bd-9412-46c2-8ac2-a3691f657fdb/data"
          },
          "reportType": {
            "$ref": "#/components/schemas/reportType",
            "readOnly": true
          },
          "reportTypeDisplayName": {
            "description": "The display name for the type of the report.",
            "type": "string",
            "readOnly": true,
            "example": "Carbon Footprint Report"
          },
          "deviceIds": {
            "description": "List of IDs of devices included in the report.",
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "example": "875765-S01+1M512501AB"
            }
          }
        }
      },
      "reportCollection-v1beta1": {
        "allOf": [
          {
            "description": "Paginated collection of report metadata resources."
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "total",
              "items"
            ],
            "properties": {
              "items": {
                "description": "Array of resources in the page of the collection.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/report-v1beta1"
                }
              }
            }
          }
        ]
      },
      "reportData-v1beta1": {
        "type": "object",
        "description": "The data for a report.",
        "properties": {
          "id": {
            "description": "Primary identifier for the report metadata resource given by the system.",
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "843023bd-9412-46c2-8ac2-a3691f657fdb"
          },
          "type": {
            "description": "The type of the resource.",
            "type": "string",
            "readOnly": true,
            "const": "compute-ops/report-data"
          },
          "name": {
            "description": "The display name of the report.",
            "type": "string",
            "readOnly": true,
            "example": "Carbon Footprint Report (All Servers)"
          },
          "request": {
            "type": "object",
            "description": "Information about the requested report data.",
            "readOnly": true,
            "properties": {
              "reportDataStartAt": {
                "description": "Beginning of time range covered by the report.",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2022-02-04T01:04:20+00:00"
              },
              "reportDataEndAt": {
                "description": "End of time range covered by the report.",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2022-02-11T01:04:20+00:00"
              },
              "reportType": {
                "$ref": "#/components/schemas/reportType",
                "readOnly": true
              }
            }
          },
          "series": {
            "description": "Array of time series data in the report.  Each series contains samples for a subject,\npartitioned into a fixed set of buckets for the report.\n",
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "The display name for the time series.",
                  "type": "string",
                  "readOnly": true,
                  "example": "Carbon Emissions"
                },
                "type": {
                  "description": "The type of the time series.  New series types may be added as a backward compatible\nchange to the API.\n",
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "CO2_EMISSIONS"
                  ]
                },
                "units": {
                  "description": "Abbreviation of the units for the values in the time series.",
                  "type": "string",
                  "readOnly": true,
                  "example": "kgCO2e"
                },
                "unitsDisplayName": {
                  "description": "The units for the values in the time series.",
                  "type": "string",
                  "readOnly": true,
                  "example": "kilograms of carbon dioxide equivalent"
                },
                "subject": {
                  "description": "The subject of the data in the time series.",
                  "type": "object",
                  "readOnly": true,
                  "properties": {
                    "displayName": {
                      "description": "The display name for the subject of the data in the time series.",
                      "type": "string",
                      "readOnly": true,
                      "example": "1M512501AB"
                    },
                    "id": {
                      "description": "The ID for the subject of the data in the time series.",
                      "type": "string",
                      "readOnly": true,
                      "example": "875765-S01+1M512501AB"
                    },
                    "type": {
                      "description": "The type of the subject of the data in the time series.",
                      "type": "string",
                      "readOnly": true,
                      "enum": [
                        "SERVER",
                        "TOTAL"
                      ]
                    }
                  }
                },
                "summary": {
                  "description": "Summary of data in the time series.",
                  "type": "object",
                  "readOnly": true,
                  "properties": {
                    "avg": {
                      "description": "The average of all samples in all buckets for the time series.",
                      "type": [
                        "number",
                        null
                      ],
                      "readOnly": true,
                      "example": 6.4
                    },
                    "sum": {
                      "description": "The sum of all samples in all buckets for the time series.",
                      "type": [
                        "number",
                        null
                      ],
                      "readOnly": true,
                      "example": 6.4
                    }
                  }
                },
                "bucketDurationInSec": {
                  "description": "The width of each bucket in the time series, in seconds.",
                  "type": "number",
                  "readOnly": true,
                  "example": 86961.3
                },
                "expectedSamplesPerBucket": {
                  "description": "The number of samples that would be expected to fall into this bucket,\nif all samples are available for the subject.  May not be a whole number,\nas samples may be split across buckets to provide more accurate data.\n",
                  "type": "number",
                  "readOnly": true,
                  "example": 289.9
                },
                "buckets": {
                  "description": "Array of buckets for the time series.  Each bucket summarizes the available samples for the\nsubject in the time period starting at the timestamp and ending `bucketDurationInSec` seconds later.\n",
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "description": "The start time for the bucket.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                      },
                      "value": {
                        "description": "The value for this bucket, based on all available samples for the subject in the\ntime range of the bucket.  If no samples are available, the value will be `null`.\n",
                        "type": [
                          "number",
                          null
                        ],
                        "readOnly": true,
                        "example": 6.4
                      },
                      "numSamples": {
                        "description": "The number of samples that contributed to the bucket.  May not be a whole number,\nas samples may be split across buckets to provide more accurate data.\n",
                        "type": "number",
                        "example": 233,
                        "readOnly": true
                      },
                      "noValueReason": {
                        "description": "If no samples are available for the bucket, the reason that no data is available.\nExactly one of `value` and `noValueReason` will be non-null for each bucket.\n",
                        "oneOf": [
                          {
                            "description": "A value is available for the bucket.",
                            "type": [
                              null
                            ]
                          },
                          {
                            "description": "The subject of the series was not connected at the time of the report data collection.",
                            "const": "NOT_CONNECTED",
                            "type": "string"
                          },
                          {
                            "description": "The subject of the series did not have a subscription at the time of the report data collection.\n",
                            "const": "SUBSCRIPTION_REQ",
                            "type": "string"
                          },
                          {
                            "description": "The subscription for the subject of the series was expired at the time of the report data\ncollection.\n",
                            "const": "SUBSCRIPTION_EXPIRED",
                            "type": "string"
                          },
                          {
                            "description": "The subscription tier for the subject of the series at the time of the report data collection was not sufficient to allow data to be collected.",
                            "const": "SUBSCRIPTION_TIER",
                            "type": "string"
                          },
                          {
                            "description": "A communications error occurred communicating with the subject of the series.",
                            "const": "ILO_COMM_ERROR",
                            "type": "string"
                          },
                          {
                            "description": "An internal error occurred collecting data from the subject of the series.",
                            "const": "INTERNAL_ERROR",
                            "type": "string"
                          },
                          {
                            "description": "The subject of the series requires a firmware update to enable data to be collected.",
                            "const": "ILO_VERSION",
                            "type": "string"
                          },
                          {
                            "description": "The subject of the series has no support for power metering, or it is disabled.",
                            "const": "NO_POWER_METERING",
                            "type": "string"
                          },
                          {
                            "description": "The reason no samples were available for the bucket is not known.",
                            "const": "UNKNOWN",
                            "type": "string"
                          }
                        ],
                        "example": null
                      },
                      "extrapolated": {
                        "description": "The value of this bucket, divided by the number of samples and multiplied by the expected number of\nsamples.  If less than the \"expected\" number of samples are available for the bucket, this value may\nbe considered a rough approximation of the value if all expected samples were available.\n",
                        "type": [
                          "number",
                          null
                        ],
                        "readOnly": true,
                        "example": 8
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "scheduleRESTOperationPatch-v1beta2": {
        "type": "object",
        "description": "A scheduled REST request operation.",
        "allOf": [
          {
            "$ref": "#/components/schemas/scheduleBaseOperation-v1beta2"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "description": "HTTP method for the request.",
                "type": "string",
                "readOnly": true,
                "enum": [
                  "DELETE",
                  "GET",
                  "HEAD",
                  "OPTIONS",
                  "PATCH",
                  "POST",
                  "PUT",
                  "TRACE"
                ],
                "example": "POST"
              },
              "uri": {
                "description": "Relative URI for the request.",
                "type": "string",
                "format": "uri-reference",
                "readOnly": true,
                "maxLength": 128,
                "example": "/api/compute/v1/jobs"
              },
              "headers": {
                "description": "HTTP request headers for the request.",
                "type": "object",
                "readOnly": false,
                "additionalProperties": {
                  "type": [
                    "string",
                    null
                  ],
                  "maxLength": 256
                },
                "propertyNames": {
                  "minLength": 1,
                  "maxLength": 128,
                  "pattern": "^[0-9a-zA-Z!#$%&'*+.^_`|~-]+$"
                },
                "maxProperties": 32,
                "example": {
                  "Accept-Language": "en"
                }
              },
              "query": {
                "description": "Query parameters for the request.",
                "type": "object",
                "readOnly": false,
                "additionalProperties": {
                  "type": [
                    "string",
                    null
                  ],
                  "maxLength": 256
                },
                "propertyNames": {
                  "maxLength": 128
                },
                "maxProperties": 32,
                "example": {
                  "force": "true"
                }
              },
              "body": {
                "description": "HTTP request body JSON, for request methods that accept a body.",
                "type": [
                  null,
                  "boolean",
                  "object",
                  "array",
                  "number",
                  "string"
                ],
                "readOnly": false
              }
            }
          }
        ]
      },
      "scheduleBaseOperation-v1beta2": {
        "type": "object",
        "description": "Base for any scheduled operation type.",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the operation executed by the schedule.",
            "example": "REST"
          },
          "timeoutInSec": {
            "type": "number",
            "description": "Timeout for the operation. If the operation takes longer, it will be aborted.",
            "default": 20,
            "exclusiveMinimum": 0,
            "maximum": 60
          }
        }
      },
      "scheduleOperationPatch-v1beta2": {
        "type": "object",
        "description": "A PATCH request on the action triggered by the schedule.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/scheduleRESTOperationPatch-v1beta2"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "REST": "#/components/schemas/scheduleRESTOperationPatch-v1beta2"
          }
        },
        "readOnly": false
      },
      "scheduleRESTHistory-v1beta2": {
        "type": "object",
        "description": "The result of a scheduled REST operation.",
        "readOnly": true,
        "required": [
          "status",
          "headers"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/scheduleBaseHistory-v1beta2"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "description": "HTTP status code of the response, or `null` if there was an error without a status code.",
                "type": [
                  "integer",
                  null
                ],
                "example": 200
              },
              "headers": {
                "description": "The HTTP response headers.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "example": {
                  "Location": "/api/compute/v1/jobs/01b7269f-d2c4-4da8-a66a-4675ef5787d1"
                }
              },
              "body": {
                "description": "The JSON payload from the body of the response.",
                "type": [
                  null,
                  "boolean",
                  "object",
                  "array",
                  "number",
                  "string"
                ]
              }
            }
          }
        ]
      },
      "scheduleBaseHistory-v1beta2": {
        "type": "object",
        "description": "Base for the result of any scheduled operation type.",
        "readOnly": true,
        "required": [
          "operationType",
          "type",
          "id",
          "resourceUri",
          "scheduleId",
          "scheduleUri",
          "startedAt",
          "succeeded",
          "summary",
          "debugId",
          "durationInSec",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "operationType": {
            "type": "string",
            "description": "The type of operation that was executed.",
            "example": "REST"
          },
          "type": {
            "type": "string",
            "description": "The type of the resource.",
            "const": "compute-ops/schedule/history"
          },
          "id": {
            "description": "A unique identifier for the execution of the schedule.",
            "type": "string",
            "format": "uuid",
            "example": "b7bac910-fec8-4907-ab78-f42b499d9041"
          },
          "resourceUri": {
            "description": "The URI of the history resource.",
            "type": "string",
            "format": "uri-reference",
            "example": "/compute-ops/v1beta2/schedules/37f66ae4-20a1-48f1-b552-b515457639ca/history/b7bac910-fec8-4907-ab78-f42b499d9041"
          },
          "scheduleId": {
            "description": "The ID of the schedule resource that owns the history resource.",
            "type": "string",
            "format": "uuid",
            "example": "37f66ae4-20a1-48f1-b552-b515457639ca"
          },
          "scheduleUri": {
            "description": "The URI of the schedule resource that owns the history resource.",
            "type": "string",
            "format": "uri-reference",
            "example": "/compute-ops/v1beta2/schedules/37f66ae4-20a1-48f1-b552-b515457639ca"
          },
          "startedAt": {
            "description": "The time the execution of the schedule started.",
            "type": "string",
            "format": "date-time",
            "example": "2022-02-14T04:35:00.051732+00:00"
          },
          "succeeded": {
            "description": "`true` if the operation was successful, e.g. if the REST request received a 2xx response.",
            "type": "boolean",
            "example": true
          },
          "summary": {
            "description": "A Human readable summary, e.g. for a REST request, the HTTP status line or short connection error.",
            "type": "string",
            "example": "OK"
          },
          "debugId": {
            "description": "A unique identifier for the execution of the schedule, to be used to help with troubleshooting.",
            "type": "string",
            "example": "13628947084908729803 14233605946314091555"
          },
          "durationInSec": {
            "description": "Amount of time between the operation took to complete.",
            "type": "number",
            "example": 0.035
          },
          "generation": {
            "description": "Monotonically increasing update counter. Since history resources are immutable, the value is always 1.",
            "type": "integer",
            "const": 1
          },
          "createdAt": {
            "description": "Time of history resource creation.",
            "type": "string",
            "format": "date-time",
            "example": "2022-02-14T04:35:00.051732+00:00"
          },
          "updatedAt": {
            "description": "Time of the last update to the history resource.",
            "type": "string",
            "format": "date-time",
            "example": "2022-02-14T04:35:00.051732+00:00"
          }
        }
      },
      "scheduleHistory-v1beta2": {
        "type": "object",
        "description": "A record of a past execution of the schedule.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/scheduleRESTHistory-v1beta2"
          }
        ],
        "discriminator": {
          "propertyName": "operationType",
          "mapping": {
            "REST": "#/components/schemas/scheduleRESTHistory-v1beta2"
          }
        },
        "readOnly": true
      },
      "schedulePatch-v1beta2": {
        "type": "object",
        "description": "A PATCH request on a schedule resource.",
        "properties": {
          "id": {
            "description": "Primary identifier for the schedule resource given by the system.",
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "37f66ae4-20a1-48f1-b552-b515457639ca"
          },
          "type": {
            "description": "The type of the resource.",
            "type": "string",
            "readOnly": true,
            "const": "compute-ops/schedule"
          },
          "generation": {
            "description": "Monotonically increasing update counter.",
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "minimum": 1
          },
          "createdAt": {
            "description": "Time of schedule resource creation.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-02-11T01:04:20.799937+00:00"
          },
          "updatedAt": {
            "description": "Time of the last update to the schedule resource.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-02-11T01:04:20.799937+00:00"
          },
          "resourceUri": {
            "description": "URI to the schedule resource itself (i.e. a self link).",
            "type": "string",
            "format": "uri-reference",
            "readOnly": true,
            "example": "/compute-ops/v1beta2/schedules/37f66ae4-20a1-48f1-b552-b515457639ca"
          },
          "historyUri": {
            "description": "URI of collection of history entries for the schedule.",
            "type": "string",
            "format": "uri-reference",
            "readOnly": true,
            "example": "/compute-ops/v1beta2/schedules/37f66ae4-20a1-48f1-b552-b515457639ca/history"
          },
          "name": {
            "description": "The display name of the schedule. Note that multiple schedules can have the same name, so schedules should likely always also be displayed with their start time.",
            "type": "string",
            "readOnly": false,
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "description": "A longer description of the schedule provided by the client.",
            "type": [
              "string",
              null
            ],
            "readOnly": false,
            "maxLength": 10000
          },
          "purpose": {
            "description": "A machine-readable category for the schedule.",
            "type": [
              "string",
              null
            ],
            "readOnly": false,
            "maxLength": 64
          },
          "associatedResourceUri": {
            "description": "Another compute-ops resource the schedule is associated with. If the resource associated with a schedule is deleted, the schedule is also deleted.",
            "type": [
              "string",
              null
            ],
            "readOnly": false,
            "maxLength": 128,
            "example": "/api/compute/v1/groups/cad23390-5209-43d1-b38d-bc96258b47e5"
          },
          "schedule": {
            "description": "When to execute the scheduled operation.",
            "type": "object",
            "readOnly": false,
            "properties": {
              "startAt": {
                "description": "For a one-time schedule, the time the schedule should be executed. For a fixed interval schedule, the time the schedule should first be executed. The start must be within a year of the current time.",
                "type": "string",
                "format": "date-time",
                "readOnly": false,
                "example": "2022-02-14T04:35:00.000000+00:00"
              },
              "interval": {
                "description": "How long between successive executions for a recurring schedule, or `null` for a one-time schedule. PT15M < `interval` < P1Y",
                "type": [
                  "string",
                  null
                ],
                "format": "duration",
                "readOnly": false,
                "example": "P7D"
              }
            }
          },
          "nextStartAt": {
            "description": "The time the operation is scheduled to execute next, or `null` if no future executions are scheduled.",
            "type": [
              "string",
              null
            ],
            "format": "date-time",
            "readOnly": true,
            "example": "2022-02-14T04:35:00.000000+00:00"
          },
          "operation": {
            "$ref": "#/components/schemas/scheduleOperationPatch-v1beta2"
          },
          "lastRun": {
            "description": "The most recent execution of the schedule, or `null` if the schedule has not yet executed.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/scheduleHistory-v1beta2"
              },
              {
                "type": [
                  null
                ]
              }
            ],
            "readOnly": true
          }
        }
      },
      "scheduleRESTOperation-v1beta2": {
        "type": "object",
        "description": "A scheduled REST request operation.",
        "allOf": [
          {
            "$ref": "#/components/schemas/scheduleRESTOperationPatch-v1beta2"
          }
        ],
        "required": [
          "type",
          "method",
          "uri"
        ],
        "properties": {
          "headers": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 256
            },
            "default": {}
          },
          "query": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 256
            },
            "default": {}
          },
          "method": {
            "readOnly": false,
            "example": "POST"
          },
          "uri": {
            "readOnly": false,
            "example": "/api/compute/v1/jobs"
          },
          "body": {
            "default": null
          }
        }
      },
      "scheduleOperation-v1beta2": {
        "type": "object",
        "description": "The action executed by the schedule.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/scheduleRESTOperation-v1beta2"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "REST": "#/components/schemas/scheduleRESTOperation-v1beta2"
          }
        },
        "readOnly": false
      },
      "schedule-v1beta2": {
        "type": "object",
        "description": "A resource that represents a scheduled operation.",
        "allOf": [
          {
            "$ref": "#/components/schemas/schedulePatch-v1beta2"
          }
        ],
        "required": [
          "id",
          "type",
          "name",
          "schedule",
          "operation"
        ],
        "properties": {
          "schedule": {
            "required": [
              "startAt"
            ],
            "properties": {
              "interval": {
                "default": null
              }
            }
          },
          "operation": {
            "$ref": "#/components/schemas/scheduleOperation-v1beta2"
          },
          "description": {
            "default": null
          },
          "purpose": {
            "default": null
          },
          "associatedResourceUri": {
            "default": null
          }
        }
      },
      "scheduleCollection-v1beta2": {
        "allOf": [
          {
            "description": "Paginated collection of schedule resources."
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "total",
              "items"
            ],
            "properties": {
              "items": {
                "description": "Array of schedule resources in the page of the collection.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schedule-v1beta2"
                }
              }
            }
          }
        ]
      },
      "scheduleHistoryCollection-v1beta2": {
        "allOf": [
          {
            "description": "Paginated collection of schedule history entries."
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "total",
              "items"
            ],
            "properties": {
              "items": {
                "description": "Array of history entires in the page of the collection.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/scheduleHistory-v1beta2"
                }
              }
            }
          }
        ]
      },
      "filter-v1beta1": {
        "type": "object",
        "description": "A saved filter on other resources.",
        "properties": {
          "id": {
            "description": "Primary identifier for the filter resource given by the system.",
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "b870f080-6448-48c5-b23a-d04f2d489174"
          },
          "type": {
            "description": "The type of the resource.",
            "type": "string",
            "readOnly": true,
            "const": "compute-ops/filter"
          },
          "generation": {
            "description": "Monotonically increasing update counter.",
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "minimum": 1
          },
          "createdAt": {
            "description": "Time of filter resource creation.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-02-11T01:04:20.799937+00:00"
          },
          "updatedAt": {
            "description": "Time of the last update to the filter resource.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-02-11T01:04:20.799937+00:00"
          },
          "resourceUri": {
            "description": "URI to the filter resource itself (i.e. a self link).",
            "type": "string",
            "format": "uri-reference",
            "readOnly": true,
            "example": "/compute-ops/v1beta1/filters/b870f080-6448-48c5-b23a-d04f2d489174"
          },
          "name": {
            "description": "The display name of the filter, must be unique.",
            "type": "string",
            "readOnly": false,
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "description": "An optional longer description of the filter.",
            "type": [
              "string",
              null
            ],
            "readOnly": false,
            "maxLength": 10000
          },
          "readOnly": {
            "description": "If true, the filter is pre-defined and cannot be edited or deleted.",
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "filterResourceType": {
            "description": "The type of the resource that the filter matches against.  New resource types may be added as a backward\ncompatible change to the API.\n",
            "type": "string",
            "enum": [
              "compute-ops/server"
            ],
            "readOnly": false,
            "default": "compute-ops/server"
          },
          "filter": {
            "description": "The filter expression, in the same syntax as the `filter` query parameter common to many\ncollection endpoints.  At least one of `filter` and `filterTags` must be specified.  If both are specified,\nboth filter expressions much match for a resource to match the filter.\n",
            "type": [
              "string",
              null
            ],
            "examples": [
              "group/id eq '031adad0-f77c-403d-84f5-e0bb46e0d927'",
              "lastFirmwareUpdate/status eq 'Ok'",
              "not group/id eq null",
              "contains(host/hostname, '299765-R18')",
              "not group/id eq null and contains(host/hostname, '299765-R18')",
              "hardware/health/summary in ('Critical','Warning')",
              "tags.OS eq 'Linux'"
            ],
            "maxLength": 2000
          },
          "filterTags": {
            "description": "An optional filter expression for tags, in the same syntax as the `filter-tags` query parameter common to many\ncollection endpoints.  Used to handle tag keys with special characters.  At least one of `filter` and `filterTags`\nmust be specified.  If both are specified, both filter expressions much match for a resource to match the filter.\n",
            "type": [
              "string",
              null
            ],
            "examples": [
              "'OS' eq 'Linux'",
              "'OS' in keys",
              "'OS' eq 'Linux' and 'Machine' in keys",
              "'OS' eq 'Linux' or 'Machine' in keys",
              "not 'Machine' in keys",
              "('OS' eq 'Linux' or 'Machine' in keys) and 'Machine' eq 'x86'"
            ],
            "readOnly": false,
            "maxLength": 2000
          },
          "uiData": {
            "description": "Opaque JSON structure used by the Compute Ops Management UI.  Other clients should not read or set this property.\nNote that the format of the data is subject to change without notice, even with the same API version of filters.\n",
            "type": [
              "object",
              null
            ],
            "default": null,
            "readOnly": true
          },
          "matchesUri": {
            "description": "URI of collection of match entities that indicate which resources match the filter.",
            "type": "string",
            "format": "uri-reference",
            "readOnly": true,
            "example": "/compute-ops/v1beta1/filters/b870f080-6448-48c5-b23a-d04f2d489174/matches"
          }
        }
      },
      "filterCollection-v1beta1": {
        "allOf": [
          {
            "description": "Paginated collection of saved filter resources."
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "total",
              "items"
            ],
            "properties": {
              "items": {
                "description": "Array of saved filter resources in the page of the collection.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filter-v1beta1"
                }
              }
            }
          }
        ]
      },
      "filterPropertiesResource-v1beta1": {
        "type": "object",
        "properties": {
          "schema": {
            "description": "A JSON Schema describing the properties usable in saved filters for a particular resource type.",
            "type": "object",
            "additionalProperties": true,
            "example": {
              "description": "Filterable properties for compute-ops/server resources",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      },
      "filterProperties-v1beta1": {
        "type": "object",
        "description": "Information about resource properties usable in filters, for each resource type supported by saved filters.\nNew resource types may be added as a backward compatible change to the API.\n",
        "properties": {
          "id": {
            "type": "string",
            "const": "properties"
          },
          "type": {
            "type": "string",
            "const": "compute-ops/filters-properties"
          },
          "filterResourceTypes": {
            "description": "Information about resource properties usable in filters, for each `filterResourceType` value supported by saved\nfilters.\n",
            "type": "object",
            "properties": {
              "compute-ops/server": {
                "$ref": "#/components/schemas/filterPropertiesResource-v1beta1"
              }
            }
          }
        }
      },
      "filterMatch-v1beta1": {
        "type": "object",
        "description": "A resource that matches a filter.",
        "readOnly": true,
        "properties": {
          "id": {
            "description": "The id of the resource that matches the filter.",
            "type": "string",
            "example": "875765-S01+1M512501AB"
          },
          "type": {
            "description": "The type of the resource that matches the filter.  New resource types may be added as a backward compatible\nchange to the API.\n",
            "type": "string",
            "enum": [
              "compute-ops/server"
            ]
          }
        }
      },
      "filterMatchCollection-v1beta1": {
        "allOf": [
          {
            "description": "Paginated collection of resources which match a saved filter."
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "total",
              "items"
            ],
            "properties": {
              "items": {
                "description": "Array of resources in the page of the collection.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/filterMatch-v1beta1"
                }
              }
            }
          }
        ]
      },
      "serverSettingsResponseNoSetting-v1beta1": {
        "description": "Server setting",
        "type": "object",
        "required": [
          "id",
          "type",
          "name",
          "category",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "description": "Primary identifier for the server-settings given by the system",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "The display name for the server-settings item",
            "type": "string"
          },
          "description": {
            "description": "Server settings description",
            "type": "string"
          },
          "category": {
            "description": "The category to which the settings data applies. Note that for settings DEFAULT, GEN10, and GEN11, the following rules apply:\n\n* FIRMWARE - GEN10, GEN11, or all\n* STORAGE - DEFAULT\n* BIOS - GEN10, GEN11, or all\n",
            "type": "string",
            "enum": [
              "FIRMWARE",
              "STORAGE",
              "BIOS"
            ]
          },
          "platformFamily": {
            "description": "Platform family to which this server setting applies. There are no restrictions for server settings and all supported server types are allowed. This optional attribute will be set to a default value of \"ANY\", to indicate that any platform family servers can be in the group(s) which are associated with this server setting, regardless of the value passed in.",
            "type": [
              "string"
            ],
            "enum": [
              "ANY",
              "PROLIANT"
            ],
            "default": "ANY"
          },
          "settings": {
            "description": "Configuration data corresponding to the specified category",
            "type": "object"
          },
          "generation": {
            "description": "Monotonically increasing update counter",
            "type": "integer",
            "minimum": 1
          },
          "resourceUri": {
            "description": "URI to the server-settings itself (i.e. a self link)",
            "type": "string",
            "format": "uri-reference",
            "example": "/compute-ops/v1beta1/server-settings/a2fdaf7a-4933-4c47-bfe0-891f0a83dc6e"
          },
          "type": {
            "description": "Type of the resource",
            "type": "string",
            "const": "compute-ops/server-setting"
          },
          "createdAt": {
            "description": "Time of server-settings creation",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "Time of the last server-settings update",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "serverSettingFirmware-v1beta1": {
        "type": "object",
        "title": "FIRMWARE server setting",
        "description": "Settings for `FIRMWARE` category",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "Firmware bundle ID",
            "type": "string",
            "example": "a9383ef62e362a0072b2947c923ba257"
          }
        }
      },
      "serverSettingBIOS-v1beta1": {
        "type": "object",
        "title": "BIOS server setting",
        "description": "Settings for `BIOS` category",
        "required": [
          "Attributes"
        ],
        "properties": {
          "Attributes": {
            "type": "object",
            "description": "The attributes that make up the particular BIOS/Workload profile selection",
            "properties": {
              "WorkloadProfile": {
                "type": "string",
                "enum": [
                  "GeneralPeakFrequencyCompute",
                  "GeneralPowerEfficientCompute",
                  "GeneralThroughputCompute",
                  "LowLatency",
                  "Virtualization-PowerEfficient",
                  "Virtualization-MaxPerformance"
                ],
                "description": "BIOS Workload Profile Options\n\nTo learn more about each, perform a GET on server-settings and see the description for each of the 6 BIOS settings.\n",
                "example": "GeneralPowerEfficientCompute"
              }
            }
          }
        }
      },
      "serverSettingStorage-v1beta1": {
        "type": "object",
        "title": "STORAGE server setting",
        "description": "Settings for `STORAGE` category",
        "required": [
          "raidType",
          "volumeSizeInGB"
        ],
        "properties": {
          "raidType": {
            "type": "string",
            "enum": [
              "RAID0",
              "RAID1",
              "RAID5"
            ],
            "description": "Select the RAID type for the storage volume.",
            "example": "RAID0"
          },
          "volumeSizeInGB": {
            "type": "number",
            "description": "It must be a number >0 or -1, where -1 indicates to use the entire disk.",
            "example": 100
          }
        }
      },
      "serverSettingsResponse-v1beta1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/serverSettingsResponseNoSetting-v1beta1"
          },
          {
            "type": "object",
            "properties": {
              "settings": {
                "type": "object",
                "properties": {
                  "GEN10": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/serverSettingFirmware-v1beta1"
                      },
                      {
                        "$ref": "#/components/schemas/serverSettingBIOS-v1beta1"
                      }
                    ]
                  },
                  "GEN11": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/serverSettingFirmware-v1beta1"
                      },
                      {
                        "$ref": "#/components/schemas/serverSettingBIOS-v1beta1"
                      }
                    ]
                  },
                  "DEFAULT": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/serverSettingStorage-v1beta1"
                      }
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "serverSettingsCollection-v1beta1": {
        "allOf": [
          {
            "description": "Server settings collection"
          },
          {
            "$ref": "#/components/schemas/resourceCollection2"
          },
          {
            "type": "object"
          },
          {
            "required": [
              "count",
              "offset",
              "items"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/serverSettingsResponse-v1beta1"
                }
              }
            }
          }
        ]
      },
      "serverSettingsCreateRequest-v1beta1": {
        "description": "Server settings",
        "type": "object",
        "required": [
          "name",
          "category"
        ],
        "properties": {
          "name": {
            "minLength": 1,
            "maxLength": 100,
            "description": "The display name for the server-settings item",
            "type": [
              "string"
            ]
          },
          "category": {
            "description": "The category to which the settings data applies. Note that for settings DEFAULT, GEN10, and GEN11, the following rules apply:\n\n* FIRMWARE - GEN10, GEN11, or all\n* STORAGE - DEFAULT\n",
            "type": "string",
            "enum": [
              "FIRMWARE",
              "STORAGE"
            ]
          },
          "description": {
            "maxLength": 10000,
            "type": [
              "string",
              null
            ],
            "example": "Firmware server setting"
          },
          "platformFamily": {
            "description": "Platform family to which this server setting applies. There are no restrictions for server setting and all supported server types are allowed. This optional attribute will be set to a default value of \"ANY\", to indicate that any platform family servers can be in the group(s) which are associated with this server setting, regardless of the value passed in.",
            "type": [
              "string"
            ],
            "enum": [
              "ANY",
              "PROLIANT"
            ],
            "default": "ANY"
          },
          "settings": {
            "description": "Configuration data corresponding to the specified category. \n\nBIOS server settings are HPE-defined only. Adding a new BIOS server setting is not supported.\n",
            "type": "object",
            "properties": {
              "GEN10": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "FIRMWARE server setting",
                    "description": "Settings for `FIRMWARE` category",
                    "properties": {
                      "id": {
                        "description": "Firmware bundle ID",
                        "type": "string",
                        "format": "uuid",
                        "example": "a9383ef62e362a0072b2947c923ba257"
                      }
                    }
                  }
                ]
              },
              "GEN11": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "FIRMWARE server setting",
                    "description": "Settings for `FIRMWARE` category",
                    "properties": {
                      "id": {
                        "description": "Firmware bundle ID",
                        "type": "string",
                        "format": "uuid",
                        "example": "a9383ef62e362a0072b2947c923ba257"
                      }
                    }
                  }
                ]
              },
              "DEFAULT": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "STORAGE server setting",
                    "description": "Settings for `STORAGE` category",
                    "properties": {
                      "raidType": {
                        "type": "string",
                        "enum": [
                          "RAID0",
                          "RAID1",
                          "RAID5"
                        ],
                        "description": "Select the RAID type for the storage volume.",
                        "example": "RAID0"
                      },
                      "volumeSizeInGB": {
                        "type": "number",
                        "description": "It must be a number >0 or -1, where -1 indicates to use the entire disk.",
                        "example": 100
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "serverSettingsUpdateRequest-v1beta1": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 10000,
            "type": [
              "string",
              null
            ],
            "example": "All prod server settings"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "example": "Production Server Settings"
          },
          "settings": {
            "description": "Configuration data corresponding to the specified category. \n\nBIOS server settings are HPE-defined only. Editing a BIOS server setting is not supported.\n",
            "type": "object",
            "properties": {
              "GEN10": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "FIRMWARE server setting",
                    "description": "Settings for `FIRMWARE` category",
                    "properties": {
                      "id": {
                        "description": "Firmware bundle ID",
                        "type": "string",
                        "format": "uuid",
                        "example": "a9383ef62e362a0072b2947c923ba257"
                      }
                    }
                  }
                ]
              },
              "GEN11": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "FIRMWARE server setting",
                    "description": "Settings for `FIRMWARE` category",
                    "properties": {
                      "id": {
                        "description": "Firmware bundle ID",
                        "type": "string",
                        "format": "uuid",
                        "example": "a9383ef62e362a0072b2947c923ba257"
                      }
                    }
                  }
                ]
              },
              "DEFAULT": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "STORAGE server setting",
                    "description": "Settings for `STORAGE` category",
                    "properties": {
                      "raidType": {
                        "type": "string",
                        "enum": [
                          "RAID0",
                          "RAID1",
                          "RAID5"
                        ],
                        "description": "Select the RAID type for the storage volume.",
                        "example": "RAID0"
                      },
                      "volumeSizeInGB": {
                        "type": "number",
                        "description": "It must be a number >0 or -1, where -1 indicates to use the entire disk.",
                        "example": 100
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "responses": {
      "400-badRequestResponse": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse",
              "properties": {
                "httpStatusCode": {
                  "const": 400
                }
              }
            }
          }
        }
      },
      "401-unauthorizedResponse": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse",
              "properties": {
                "httpStatusCode": {
                  "const": 401
                }
              }
            }
          }
        }
      },
      "403-forbiddenResponse": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse",
              "properties": {
                "httpStatusCode": {
                  "const": 403
                }
              }
            }
          }
        }
      },
      "406-notAcceptableResponse": {
        "description": "Not acceptable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse",
              "properties": {
                "httpStatusCode": {
                  "const": 406
                }
              }
            }
          }
        }
      },
      "500-internalServerErrorResponse": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse",
              "properties": {
                "httpStatusCode": {
                  "const": 500
                }
              }
            }
          }
        }
      },
      "404-notFoundResponse": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse",
              "properties": {
                "httpStatusCode": {
                  "const": 404
                }
              }
            }
          }
        }
      },
      "415-unsupportedMediaTypeResponse": {
        "description": "Unsupported media type",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse",
              "properties": {
                "httpStatusCode": {
                  "const": 415
                }
              }
            }
          }
        }
      },
      "412-preconditionFailedResponse": {
        "description": "Precondition failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse",
              "properties": {
                "httpStatusCode": {
                  "const": 412
                }
              }
            }
          }
        }
      },
      "409-conflictResponse": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse",
              "properties": {
                "httpStatusCode": {
                  "const": 409
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "paths": {
    "/compute-ops/v1beta2/servers": {
      "get": {
        "summary": "List all servers",
        "description": "Retrieve data for all Servers",
        "operationId": "get_v1beta2_servers",
        "tags": [
          "servers - v1beta2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverCollection-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Patch multiple servers",
        "description": "Update multiple server(s) specified by the `id`(s). The operation is atomic (either fully successful or failing without modifying any servers).",
        "operationId": "patch_v1beta2_servers_by_ids",
        "tags": [
          "servers - v1beta2"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "productId+serialNumber (percent-encoded)"
              }
            },
            "style": "form",
            "explode": true,
            "examples": {
              "oneId": {
                "summary": "Example with a single server id",
                "value": [
                  "177751-Y66%2B8899177751666258"
                ]
              },
              "multipleIds": {
                "summary": "Example with multiple server ids",
                "value": [
                  "177751-Y66%2B8899177751666258",
                  "320888-H80%2B8899320888180208"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/contentTypeHeaderPatch"
          }
        ],
        "requestBody": {
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/serverUpdateRequest-v1beta2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/servers/{id}": {
      "get": {
        "summary": "Get a server",
        "description": "Retrieve data for a Server specified by its `id`",
        "operationId": "get_v1beta2_server_by_id",
        "tags": [
          "servers - v1beta2"
        ],
        "responses": {
          "200": {
            "description": "Server Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/server-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique Server identifier",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "summary": "Patch a server",
        "description": "Partially update a Server specified by its `id`",
        "operationId": "patch_v1beta2_server_by_id",
        "tags": [
          "servers - v1beta2"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Server identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/contentTypeHeaderPatch"
          }
        ],
        "requestBody": {
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/serverUpdateRequest-v1beta2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/server-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/servers/{id}/alerts": {
      "get": {
        "summary": "List all alerts for a server",
        "description": "Retrieve alert data for a Server specified by the id of the server",
        "operationId": "get_v1beta2_server_alerts",
        "tags": [
          "servers - v1beta2"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Server identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Server's Alert Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/alertCollection-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/servers/{id}/notifications": {
      "get": {
        "summary": "Get the critical event notification status of a server",
        "description": "<p><b>Purpose</b><br> Retrieves the current value of the critical event notification option.  A value of true will enable sending of critical event notifications for the server. <br></p>",
        "operationId": "get_v1beta2_server_notifications",
        "tags": [
          "servers - v1beta2"
        ],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationsResponse-v1beta2"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update critical event notification for a server",
        "description": "<p><b>Purpose</b><br> Setting this value to true will enable sending of critical event notifications for server. <br></p> <p><b>Initial value</b><br> False (no notification will be sent) <br></p>",
        "operationId": "update_v1beta2_server_notifications",
        "tags": [
          "servers - v1beta2"
        ],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notificationsRequest-v1beta2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationsResponse-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/servers/{id}/raw-inventory": {
      "get": {
        "summary": "List raw inventories for a server",
        "description": "Retrieve firmware, software, storage inventories, PCI devices and smart update tool settings for a server specified by the id of the server",
        "operationId": "get_v1beta2_server_inventory",
        "tags": [
          "servers - v1beta2"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Server identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Server's raw inventory Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rawInventory-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/jobs": {
      "get": {
        "summary": "List all jobs",
        "description": "Retrieve the list of jobs",
        "operationId": "get_v1beta2_jobs",
        "tags": [
          "jobs - v1beta2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jobCollection-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a job",
        "description": "Create a job for a given resource. A job is a multi-step task performed by Compute Ops Manager.\n\nThis table summarizes the jobs and their template IDs. For more information about each job template, expand the Job\nDefinitions section and click on Overview to get started.\n\n| Name                                 | Description                                         | Resource Type      | Template ID                          |\n| ------------------------------------ | --------------------------------------------------  | ------------------ | ------------------------------------ |\n| Server Power Off                     | Power off a server                                  | compute-ops/server | d0c13b58-748c-461f-9a61-c0c5c71f1bb4 |\n| Server Power On                      | Power on a server                                   | compute-ops/server | 0cbb2377-1834-488d-840c-d5bf788c34fb |\n| Server Restart                       | Restart a server                                    | compute-ops/server | 30110551-cad6-4069-95b8-dbce9bbd8525 |\n| Server Cold Boot                     | Cold boot a server                                  | compute-ops/server | aacfb3e0-6575-4d4f-a711-1ee1ae768407 |\n| Server Firmware Update               | Update firmware on a server                         | compute-ops/server | fd54a96c-cabc-42e3-aee3-374a2d009dba |\n| Group Firmware Update                | Update firmware on servers in a group               | compute-ops/group  | 91159b5e-9eeb-11ec-a9da-00155dc0a0c0 |\n| Group Firmware Compliance            | Calculate firmware compliance of servers in a group | compute-ops/group  | 23b8ba2a-6c46-4223-b028-919382c7dcac |\n| Group Internal Storage Configuration | Configures internal storage volume for servers in a group | compute-ops/group | c708eb57-235d-4ea8-9e21-8ceea2438773 |\n| Group Apply Server Setting           | Apply server setting on a group                     | compute-ops/group  | beff07ce-f36d-4699-9ac3-f872dcd63133 |\n",
        "operationId": "create_v1beta2_job",
        "tags": [
          "jobs - v1beta2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/contentTypeHeaderJson"
          }
        ],
        "requestBody": {
          "description": "Job request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/jobCreate-v1beta2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/jobs/{id}": {
      "get": {
        "summary": "Get a job by ID",
        "description": "Retrieve details about the job referenced by its `id`",
        "operationId": "get_v1beta2_job_by_id",
        "tags": [
          "jobs - v1beta2"
        ],
        "responses": {
          "200": {
            "description": "Job data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Patch a job by ID",
        "description": "Updates an existing job",
        "operationId": "patch_v1beta2_job_by_id",
        "tags": [
          "jobs - v1beta2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/contentTypeHeaderPatch"
          }
        ],
        "requestBody": {
          "description": "Job update data",
          "required": true,
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/jobUpdate-v1beta2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "412": {
            "$ref": "#/components/responses/412-preconditionFailedResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique Job identifier",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ]
    },
    "/compute-ops/v1beta3/jobs": {
      "get": {
        "summary": "List all jobs",
        "description": "Retrieve the list of jobs",
        "operationId": "get_v1beta3_jobs",
        "tags": [
          "jobs - v1beta3"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jobCollection-v1beta3"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a job",
        "description": "Start a job for a given Server",
        "operationId": "create_v1beta3_job",
        "tags": [
          "jobs - v1beta3"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/contentTypeHeaderJson"
          }
        ],
        "requestBody": {
          "description": "Job request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/jobCreate-v1beta3"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job-v1beta3"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta3/jobs/{id}": {
      "get": {
        "summary": "Get a job by ID",
        "description": "Retrieve details about the job referenced by its `id`",
        "operationId": "get_v1beta3_job_by_id",
        "tags": [
          "jobs - v1beta3"
        ],
        "responses": {
          "200": {
            "description": "Job data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job-v1beta3"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Patch a job by ID",
        "description": "Updates an existing job",
        "operationId": "patch_v1beta3_job_by_id",
        "tags": [
          "jobs - v1beta3"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/contentTypeHeaderPatch"
          }
        ],
        "requestBody": {
          "description": "Job update data",
          "required": true,
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/jobUpdate-v1beta3"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job-v1beta3"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "412": {
            "$ref": "#/components/responses/412-preconditionFailedResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique Job identifier",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ]
    },
    "/compute-ops/v1beta2/job-templates": {
      "get": {
        "summary": "List all job templates",
        "description": "Retrieve the list of job templates",
        "operationId": "get_v1beta2_job_templates",
        "tags": [
          "job-templates - v1beta2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of job templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jobTemplateCollection-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/job-templates/{id}": {
      "get": {
        "summary": "Get a job template",
        "description": "Retrieve details about the job template referenced by its `id`",
        "operationId": "get_v1beta2_job_template_by_id",
        "tags": [
          "job-templates - v1beta2"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Job template identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job template data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jobTemplate-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/activities": {
      "get": {
        "summary": "List all activities",
        "description": "Retrieve the list of activities",
        "operationId": "get_v1beta2_activities",
        "tags": [
          "activities - v1beta2"
        ],
        "parameters": [
          {
            "name": "groups",
            "in": "query",
            "description": "Specify the number of _groups of activities_ that should be returned. A _group of activities_ is a single activity item that corresponds to one or more activities with the same activity `key` that occurred back-to-back. A group of activities might be \"5 servers assigned to Compute Ops Management\" or \"12 servers firmware update successful\".\nThis parameter has no relation to the groups resource.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10
            }
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/activityCollection-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/firmware-bundles": {
      "get": {
        "summary": "List all firmware bundles",
        "description": "Retrieve the list of firmware bundles",
        "operationId": "get_v1beta2_firmware_bundles",
        "tags": [
          "firmware-bundles - v1beta2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/firmwareBundleCollection-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/firmware-bundles/{id}": {
      "get": {
        "summary": "Get a firmware bundle by ID",
        "description": "Retrieve the firmware bundle details by its `id`",
        "operationId": "get_v1beta2_firmware_bundle_by_id",
        "tags": [
          "firmware-bundles - v1beta2"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Firmware bundle identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/firmwareBundle-v1beta2"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/groups": {
      "get": {
        "summary": "List all groups",
        "description": "Get the list of a user's groups.",
        "operationId": "get_v1beta2_groups",
        "tags": [
          "groups - v1beta2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCollection-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a group",
        "description": "Create a group for a specific user.",
        "operationId": "create_v1beta2_group",
        "tags": [
          "groups - v1beta2"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/contentTypeHeaderJson"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/groupCreateRequest-v1beta2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "headers": {
              "Location": {
                "description": "Location for the group that was created",
                "schema": {
                  "type": "string",
                  "format": "uri-reference",
                  "example": "/compute-ops/v1beta2/groups/0e7f516c-0829-4135-83d6-09ce844ddd9d"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupResponse-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "409": {
            "$ref": "#/components/responses/409-conflictResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/groups/{group-id}": {
      "get": {
        "summary": "Get a group by ID",
        "description": "Get a specific group by group id.",
        "operationId": "get_v1beta2_group_by_id",
        "tags": [
          "groups - v1beta2"
        ],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "name": "group-id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupResponse-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a group",
        "description": "Delete a group.",
        "operationId": "delete_v1beta2_group_by_id",
        "tags": [
          "groups - v1beta2"
        ],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "name": "group-id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "name": "force",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Patch a group",
        "description": "Partially update a group.",
        "operationId": "patch_v1beta2_group_by_id",
        "tags": [
          "groups - v1beta2"
        ],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "name": "group-id",
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/contentTypeHeaderPatch"
          }
        ],
        "requestBody": {
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/groupUpdateRequest-v1beta2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupResponse-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/groups/{group-id}/devices": {
      "get": {
        "summary": "List all devices in a group",
        "operationId": "get_v1beta2_group_devices",
        "tags": [
          "groups - v1beta2"
        ],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "name": "group-id",
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deviceResponseCollection-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Assign a device to a group",
        "operationId": "assign_v1beta2_group_devices",
        "tags": [
          "groups - v1beta2"
        ],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "name": "group-id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "name": "dry-run",
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/contentTypeHeaderJson"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/groupAssignRequest-v1beta2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deviceResponseCollectionNew-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "409": {
            "$ref": "#/components/responses/409-conflictResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Bulk unassign devices from a group",
        "operationId": "unassign_v1beta2_group_devices",
        "tags": [
          "groups - v1beta2"
        ],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "name": "group-id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "style": "form",
            "explode": true,
            "name": "id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "name": "force",
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/groups/{group-id}/devices/{device-id}": {
      "delete": {
        "summary": "Unassign a device from a group",
        "operationId": "unassign_v1beta2_group_device_by_id",
        "tags": [
          "groups - v1beta2"
        ],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "name": "group-id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string"
            },
            "name": "device-id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/groups/{group-id}/compliance": {
      "get": {
        "summary": "List all devices compliance in a group",
        "description": "List all the device's compliance detail",
        "operationId": "get_v1beta2_group_devices_compliance",
        "tags": [
          "groups - v1beta2"
        ],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "name": "group-id",
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/filterParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deviceComplianceCollection-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/groups/{group-id}/compliance/{compliance-id}": {
      "get": {
        "summary": "Get a device compliance by compliance Id",
        "description": "Get a specific device compliance detail of the group by passing group id and compliance id.",
        "operationId": "get_v1beta2_compliance_by_compliance_id",
        "tags": [
          "groups - v1beta2"
        ],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "name": "group-id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "name": "compliance-id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deviceCompliance-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta1/reports": {
      "get": {
        "summary": "List all reports",
        "description": "Retrieve a paginated collection of report metadata resources.  Currently, only the latest report of each\ntype is retained.\n",
        "tags": [
          "reports - v1beta1"
        ],
        "operationId": "get_reports",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam",
            "schema": {
              "type": "integer",
              "default": 5,
              "minimum": 0,
              "maximum": 10
            }
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam",
            "schema": {
              "type": "string",
              "default": "createdAt desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportCollection-v1beta1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta1/reports/{id}": {
      "get": {
        "summary": "Get report metadata",
        "description": "Retrieve a single report metadata resource by ID.\n",
        "tags": [
          "reports - v1beta1"
        ],
        "operationId": "get_report",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/report-v1beta1"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta1/reports/{id}/data": {
      "get": {
        "summary": "Get report data",
        "description": "Retrieve the data for a report.\n",
        "tags": [
          "reports - v1beta1"
        ],
        "operationId": "get_report_data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportData-v1beta1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/schedules": {
      "get": {
        "summary": "List all schedules",
        "description": "Retrieve a paginated collection of schedule resources.",
        "tags": [
          "schedules - v1beta2"
        ],
        "operationId": "get_v1beta2_schedules",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam",
            "schema": {
              "type": "integer",
              "default": 50,
              "minimum": 0,
              "maximum": 10000
            }
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam",
            "schema": {
              "type": "string",
              "default": "createdAt asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduleCollection-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a schedule",
        "description": "Create a new schedule resource. This endpoint requires permission to call the `uri` endpoint specified in the `operation` of the request.",
        "tags": [
          "schedules - v1beta2"
        ],
        "operationId": "create_v1beta2_schedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotencyKeyHeader"
          },
          {
            "$ref": "#/components/parameters/contentTypeHeaderJson"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedule-v1beta2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "headers": {
              "Location": {
                "description": "The URI of the newly-created resource",
                "example": "/compute-ops/v1beta2/schedules/37f66ae4-20a1-48f1-b552-b515457639ca",
                "schema": {
                  "type": "string",
                  "format": "uri-reference"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schedule-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "409": {
            "$ref": "#/components/responses/409-conflictResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/schedules/{id}": {
      "get": {
        "summary": "Get a schedule",
        "description": "Retrieve a single schedule resource by ID.",
        "tags": [
          "schedules - v1beta2"
        ],
        "operationId": "get_v1beta2_schedule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Schedule ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schedule-v1beta2"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a schedule",
        "description": "Delete a schedule resource and its associated history.",
        "tags": [
          "schedules - v1beta2"
        ],
        "operationId": "delete_v1beta2_schedule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Schedule ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Update a schedule",
        "description": "A update a schedule resource, using the [RFC 7396](https://datatracker.ietf.org/doc/html/rfc7396) (JSON Merge Patch) format.",
        "tags": [
          "schedules - v1beta2"
        ],
        "operationId": "patch_v1beta2_schedule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Schedule ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/ifMatchHeader"
          },
          {
            "$ref": "#/components/parameters/contentTypeHeaderPatch"
          }
        ],
        "requestBody": {
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/schedulePatch-v1beta2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schedule-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "412": {
            "$ref": "#/components/responses/412-preconditionFailedResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/schedules/{id}/history": {
      "get": {
        "summary": "List all history of a schedule",
        "description": "Retrieve a paginated collection of history entries for a schedule resource.",
        "tags": [
          "schedules - v1beta2"
        ],
        "operationId": "get_v1beta2_schedule_history",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Schedule ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam",
            "schema": {
              "type": "integer",
              "default": 50,
              "minimum": 0,
              "maximum": 10000
            }
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam",
            "schema": {
              "type": "string",
              "default": "startedAt desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduleHistoryCollection-v1beta2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta2/schedules/{id}/history/{history-id}": {
      "get": {
        "summary": "Get a history resource",
        "description": "Retrieve a single history entry for a schedule resource.",
        "tags": [
          "schedules - v1beta2"
        ],
        "operationId": "get_v1beta2_schedule_history_entry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Schedule ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "history-id",
            "in": "path",
            "description": "History ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduleHistory-v1beta2"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta1/filters": {
      "get": {
        "summary": "List all saved filters",
        "description": "Retrieve a paginated collection of saved filter resources.",
        "tags": [
          "filters - v1beta1"
        ],
        "operationId": "get_filters",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam",
            "schema": {
              "type": "integer",
              "default": 50,
              "minimum": 0,
              "maximum": 10000
            }
          },
          {
            "$ref": "#/components/parameters/filterParam"
          },
          {
            "$ref": "#/components/parameters/sortParam",
            "schema": {
              "type": "string",
              "default": "createdAt asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filterCollection-v1beta1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Save a filter",
        "description": "Create a new saved filter resource.",
        "tags": [
          "filters - v1beta1"
        ],
        "operationId": "create_filter",
        "parameters": [
          {
            "$ref": "#/components/parameters/idempotencyKeyHeader"
          },
          {
            "$ref": "#/components/parameters/contentTypeHeaderJson"
          },
          {
            "in": "query",
            "name": "dry-run",
            "description": "If `true`, do not create the saved filter - instead, perform validation of filter name and syntax as if creating the filter.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filter-v1beta1",
                "oneOf": [
                  {
                    "required": [
                      "name",
                      "filter"
                    ]
                  },
                  {
                    "required": [
                      "name",
                      "filterTags"
                    ]
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The URI of the newly-created resource",
                "example": "/compute-ops/v1beta1/filters/b870f080-6448-48c5-b23a-d04f2d489174",
                "schema": {
                  "type": "string",
                  "format": "uri-reference"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filter-v1beta1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "409": {
            "$ref": "#/components/responses/409-conflictResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta1/filters/properties": {
      "get": {
        "summary": "Get filterable properties",
        "description": "Retrieve information about resource properties usable in saved filters.",
        "tags": [
          "filters - v1beta1"
        ],
        "operationId": "get_filter_properties",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filterProperties-v1beta1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta1/filters/{id}": {
      "get": {
        "summary": "Get a saved filter",
        "description": "Retrieve a single saved filter resource by ID.",
        "tags": [
          "filters - v1beta1"
        ],
        "operationId": "get_filter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Filter ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filter-v1beta1"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a saved filter",
        "description": "Delete a saved filter resource.",
        "tags": [
          "filters - v1beta1"
        ],
        "operationId": "delete_filter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Filter ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Update a saved filter",
        "description": "A update a saved filter resource, using the [RFC 7396](https://datatracker.ietf.org/doc/html/rfc7396) (JSON Merge Patch) format.",
        "tags": [
          "filters - v1beta1"
        ],
        "operationId": "patch_filter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Filter ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/ifMatchHeader"
          },
          {
            "$ref": "#/components/parameters/contentTypeHeaderPatch"
          }
        ],
        "requestBody": {
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/filter-v1beta1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filter-v1beta1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "412": {
            "$ref": "#/components/responses/412-preconditionFailedResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta1/filters/{id}/matches": {
      "get": {
        "summary": "List resources matching a filter",
        "description": "Retrieve a paginated collection of match entries that indicate which resources match a saved filter.",
        "tags": [
          "filters - v1beta1"
        ],
        "operationId": "get_filter_matches",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Filter ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam",
            "schema": {
              "type": "integer",
              "default": 50,
              "minimum": 0,
              "maximum": 10000
            }
          },
          {
            "$ref": "#/components/parameters/sortParam",
            "schema": {
              "type": "string",
              "default": "id asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filterMatchCollection-v1beta1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta1/server-settings": {
      "get": {
        "summary": "List all server settings",
        "description": "Get the list of a user's server-settings",
        "operationId": "get_v1beta1_server_settings",
        "tags": [
          "server-settings - v1beta1"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filterParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverSettingsCollection-v1beta1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create server settings",
        "description": "Create a server settings entry",
        "operationId": "create_server_settings",
        "tags": [
          "server-settings - v1beta1"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/contentTypeHeaderJson"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/serverSettingsCreateRequest-v1beta1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "headers": {
              "Location": {
                "description": "Location for the server-settings item that was created",
                "schema": {
                  "type": "string",
                  "format": "uri-reference",
                  "example": "/compute-ops/v1beta1/server-settings/0e7f516c-0829-4135-83d6-09ce844ddd9d"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverSettingsResponse-v1beta1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "409": {
            "$ref": "#/components/responses/409-conflictResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    },
    "/compute-ops/v1beta1/server-settings/{id}": {
      "get": {
        "summary": "Get a server-settings item by ID",
        "description": "Get a specific server-settings item by server-settings id.",
        "operationId": "get_v1beta1_server_settings_by_id",
        "tags": [
          "server-settings - v1beta1"
        ],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverSettingsResponse-v1beta1"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a server-settings item",
        "description": "Delete a server-settings item.",
        "operationId": "delete_v1beta1_server_settings_by_id",
        "tags": [
          "server-settings - v1beta1"
        ],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "name": "id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "name": "force",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "409": {
            "$ref": "#/components/responses/409-conflictResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Patch a server-settings item",
        "description": "Partially update a server-settings item.",
        "operationId": "patch_v1beta1_server_settings_by_id",
        "tags": [
          "server-settings - v1beta1"
        ],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "name": "id",
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/contentTypeHeaderPatch"
          }
        ],
        "requestBody": {
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/serverSettingsUpdateRequest-v1beta1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverSettingsResponse-v1beta1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-badRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/401-unauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403-forbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/404-notFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/406-notAcceptableResponse"
          },
          "415": {
            "$ref": "#/components/responses/415-unsupportedMediaTypeResponse"
          },
          "500": {
            "$ref": "#/components/responses/500-internalServerErrorResponse"
          }
        }
      }
    }
  }
}
